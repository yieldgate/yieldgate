{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/deps/Aave.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IWETHGateway {\n    function depositETH(\n        address pool,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external payable;\n\n    function withdrawETH(\n        address pool,\n        uint256 amount,\n        address onBehalfOf\n    ) external;\n}\n\n/**\n * @title IPoolAddressesProvider\n * @author Aave\n * @notice Defines the basic interface for a Pool Addresses Provider.\n * https://github.com/aave/aave-v3-core/blob/master/contracts/interfaces/IPoolAddressesProvider.sol\n **/\ninterface IAavePoolAddressesProvider {\n    /**\n     * @notice Returns the address of the Pool proxy.\n     * @return The Pool proxy address\n     **/\n    function getPool() external view returns (address);\n}\n\n// https://github.com/aave/aave-v3-core/blob/master/contracts/interfaces/IPool.sol\ninterface IAavePool {\n    /**\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function supply(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n     * @param to The address that will receive the underlying, same as msg.sender if the user\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n     *   different wallet\n     * @return The final amount withdrawn\n     **/\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @notice Returns the state and configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The state and configuration data of the reserve\n     **/\n    function getReserveData(address asset) external view returns (AaveDataTypes.ReserveData memory);\n}\n\n// https://github.com/aave/aave-v3-core/blob/master/contracts/protocol/libraries/types/DataTypes.sol\nlibrary AaveDataTypes {\n    struct ReserveData {\n        //stores the reserve configuration\n        ReserveConfigurationMap configuration;\n        //the liquidity index. Expressed in ray\n        uint128 liquidityIndex;\n        //the current supply rate. Expressed in ray\n        uint128 currentLiquidityRate;\n        //variable borrow index. Expressed in ray\n        uint128 variableBorrowIndex;\n        //the current variable borrow rate. Expressed in ray\n        uint128 currentVariableBorrowRate;\n        //the current stable borrow rate. Expressed in ray\n        uint128 currentStableBorrowRate;\n        //timestamp of last update\n        uint40 lastUpdateTimestamp;\n        //the id of the reserve. Represents the position in the list of the active reserves\n        uint16 id;\n        //aToken address\n        address aTokenAddress;\n        //stableDebtToken address\n        address stableDebtTokenAddress;\n        //variableDebtToken address\n        address variableDebtTokenAddress;\n        //address of the interest rate strategy\n        address interestRateStrategyAddress;\n        //the current treasury balance, scaled\n        uint128 accruedToTreasury;\n        //the outstanding unbacked aTokens minted through the bridging feature\n        uint128 unbacked;\n        //the outstanding debt borrowed against this asset in isolation mode\n        uint128 isolationModeTotalDebt;\n    }\n\n    struct ReserveConfigurationMap {\n        //bit 0-15: LTV\n        //bit 16-31: Liq. threshold\n        //bit 32-47: Liq. bonus\n        //bit 48-55: Decimals\n        //bit 56: reserve is active\n        //bit 57: reserve is frozen\n        //bit 58: borrowing is enabled\n        //bit 59: stable rate borrowing enabled\n        //bit 60: asset is paused\n        //bit 61: borrowing in isolation mode is enabled\n        //bit 62-63: reserved\n        //bit 64-79: reserve factor\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\n        //bit 152-167 liquidation protocol fee\n        //bit 168-175 eMode category\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\n        //bit 252-255 unused\n\n        uint256 data;\n    }\n}\n"
    },
    "contracts/interfaces/ITokenPool.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/**\n * @title Yieldgate Token Pool Interface\n * @author Sebastian Stammler <seb@yieldgate.xyz>\n */\ninterface ITokenPool {\n    event Staked(address indexed token, address indexed supporter, uint256 amount);\n    event Unstaked(address indexed token, address indexed supporter, uint256 amount);\n    event Claimed(address indexed token, uint256 amount);\n\n    /**\n     * @notice Stakes given amount of token on behalf of the provided supporter.\n     * @dev Prio to calling stake, a respective allowance for the token pool has\n     *   to be set. On success, the implementation must emit a Staked event.\n     * @param token The ERC20 token to stake.\n     * @param supporter The supporter on whose behalf the token is staked.\n     * @param amount The amount of token to stake.\n     */\n    function stake(\n        address token,\n        address supporter,\n        uint256 amount\n    ) external;\n\n    /**\n     * @notice Unstakes all previously staked token by the calling supporter.\n     *   The beneficiary keeps all generated yield.\n     * @dev On success, the implementation must emit an Unstaked event.\n     * @param token The ERC20 token to stake.\n     * @return Returns the unstaked amount.\n     */\n    function unstake(address token) external returns (uint256);\n\n    /**\n     * @notice Sends the accrued yield to the beneficiary of this pool.\n     * @dev The implementation should enforce some access control to this\n     *   function, e.g., only let it be callable by the beneficiary. It must\n     *   emit a Claimed event on success.\n     * @return Returns the claimed amount of yield.\n     */\n    function claim(address token) external returns (uint256);\n\n    /**\n     * @notice Queries the claimable yield for the given ERC20 token.\n     * @param token The ERC20 token to query.\n     * @return Returns the claimable yield.\n     */\n    function claimable(address token) external view returns (uint256);\n\n    /**\n     * @notice Queries the total staked amount for the given ERC20 token.\n     * @param token The ERC20 token to query.\n     * @return Returns the total staked amount.\n     */\n    function staked(address token) external view returns (uint256);\n}\n"
    },
    "contracts/TokenPool.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ITokenPool} from \"./interfaces/ITokenPool.sol\";\nimport {IAavePool, IAavePoolAddressesProvider} from \"./deps/Aave.sol\";\n\ncontract TokenPool is ITokenPool {\n    /*\n     * @notice Provider of AAVE protocol contract instance addresses. This\n     *   address is fixed for a particular market.\n     * @dev Since the actual AAVE Pool address is subject to change, AAVE\n     *   advices to always read the pool address from the PoolAddressesProvider.\n     */\n    IAavePoolAddressesProvider public immutable aavePoolAddressesProvider;\n\n    /*\n     * @notice address of beneficiary that can claim generated yield.\n     */\n    address public immutable beneficiary;\n\n    /*\n     * @notice Amount staked by token and by user.\n     * @dev Mapping format is token address -> user -> amount.\n     */\n    mapping(address => mapping(address => uint256)) public stakes;\n\n    // Total stake, by token address.\n    mapping(address => uint256) internal totalStake;\n\n    modifier onlyBeneficiary() {\n        require(msg.sender == beneficiary, \"only beneficiary\");\n        _;\n    }\n\n    constructor(address _aavePoolAddressesProvider, address _beneficiary) {\n        aavePoolAddressesProvider = IAavePoolAddressesProvider(_aavePoolAddressesProvider);\n        beneficiary = _beneficiary;\n    }\n\n    /*\n     * @notice Approves the Aave Pool to spend the given token on behalf of this\n     * token pool. Trusting the Aave pool implementation, the maximum allowance\n     * is set to save on repeated approve calls.\n     * @dev Has to be called once before staking a new token, by any user.\n     * A new call would be necessary in the unlikely event that the Aave pool\n     * proxy address, returned by the PoolAddressesProvider, changes.\n     */\n    function approvePool(address token) public {\n        require(\n            IERC20(token).approve(address(aavePool()), type(uint256).max),\n            \"AavePool approval failed\"\n        );\n    }\n\n    /**\n     * @inheritdoc ITokenPool\n     * @dev When staking a token for the first time, the (infinite) ERC20\n     * allowance for the Aave Pool has to be approved first by calling\n     * function approvePool (with any user).\n     * stake emits a Staked event on success.\n     */\n    function stake(\n        address token,\n        address supporter,\n        uint256 amount\n    ) public virtual {\n        require(amount > 0, \"zero amount\");\n\n        stakes[token][supporter] += amount;\n        totalStake[token] += amount;\n\n        require(\n            IERC20(token).transferFrom(msg.sender, address(this), amount),\n            \"token transfer failed\"\n        );\n        // For the next step to succeed, approvePool must have been called once before.\n        aavePool().supply(token, amount, address(this), 0);\n\n        emit Staked(token, supporter, amount);\n    }\n\n    /// @inheritdoc ITokenPool\n    function unstake(address token) public virtual returns (uint256) {\n        address supporter = msg.sender;\n        uint256 amount = stakes[token][supporter];\n        require(amount > 0, \"no supporter\");\n\n        stakes[token][supporter] = 0;\n        totalStake[token] -= amount;\n\n        withdraw(token, amount, supporter);\n\n        emit Unstaked(token, supporter, amount);\n        return amount;\n    }\n\n    /**\n     * @inheritdoc ITokenPool\n     * @dev Emits a Claimed event on success.\n     */\n    function claim(address token) public virtual onlyBeneficiary returns (uint256) {\n        uint256 amount = claimable(token);\n        withdraw(token, amount, beneficiary);\n\n        emit Claimed(token, amount);\n        return amount;\n    }\n\n    function withdraw(\n        address token,\n        uint256 amount,\n        address receiver\n    ) internal {\n        aavePool().withdraw(token, amount, receiver);\n    }\n\n    /// @inheritdoc ITokenPool\n    function claimable(address token) public view returns (uint256) {\n        IERC20 aToken = IERC20(aavePool().getReserveData(token).aTokenAddress);\n        return aToken.balanceOf(address(this)) - staked(token);\n    }\n\n    /// @inheritdoc ITokenPool\n    function staked(address token) public view returns (uint256) {\n        return totalStake[token];\n    }\n\n    function aavePool() internal view returns (IAavePool) {\n        return IAavePool(aavePoolAddressesProvider.getPool());\n    }\n}\n"
    },
    "contracts/YieldGate.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport {IWETHGateway} from \"./deps/Aave.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\n\ncontract YieldGate {\n    event PoolDeployed(address indexed beneficiary, address indexed deployer, address pool);\n\n    address private immutable beneficiaryPoolLib;\n    address public immutable aavePool;\n    IWETHGateway public immutable wethgw;\n    IERC20 public immutable token;\n\n    // beneficiary => BeneficiaryPool\n    mapping(address => BeneficiaryPool) public beneficiaryPools;\n\n    constructor(\n        address _pool,\n        address wethGateway,\n        address aWETH\n    ) {\n        aavePool = _pool;\n        wethgw = IWETHGateway(wethGateway);\n        token = IERC20(aWETH);\n\n        BeneficiaryPool bp = new BeneficiaryPool();\n        // init it so no one else can (RIP Parity Multisig)\n        bp.init(address(this), msg.sender);\n        beneficiaryPoolLib = address(bp);\n    }\n\n    function deployPool(address beneficiary) external returns (address) {\n        BeneficiaryPool bpool = BeneficiaryPool(Clones.clone(beneficiaryPoolLib));\n        bpool.init(address(this), beneficiary);\n        beneficiaryPools[beneficiary] = bpool;\n\n        emit PoolDeployed(beneficiary, msg.sender, address(bpool));\n        return address(bpool);\n    }\n\n    // claimable returns the total earned ether by the provided beneficiary.\n    // It is the accrued interest on all staked ether.\n    // It can be withdrawn by the beneficiary with claim.\n    function claimable(address beneficiary) public view returns (uint256) {\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\n        if (address(bpool) == address(0)) {\n            return 0;\n        }\n        return bpool.claimable();\n    }\n\n    // staked returns the total staked ether on behalf of the beneficiary.\n    function staked(address beneficiary) public view returns (uint256) {\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\n        if (address(bpool) == address(0)) {\n            return 0;\n        }\n        return bpool.staked();\n    }\n\n    // returns the total staked ether by the supporter and the timeout until\n    // which the stake is locked.\n    function supporterStaked(address supporter, address beneficiary)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\n        if (address(bpool) == address(0)) {\n            return (0, 0);\n        }\n        return (bpool.stakes(supporter), bpool.lockTimeout(supporter));\n    }\n}\n\ncontract BeneficiaryPool {\n    event Staked(\n        address indexed beneficiary,\n        address indexed supporter,\n        uint256 amount,\n        uint256 lockTimeout\n    );\n    event Unstaked(address indexed beneficiary, address indexed supporter, uint256 amount);\n    event Claimed(address indexed beneficiary, uint256 amount);\n    event ParametersChanged(address indexed beneficiary, uint256 minAmount, uint256 minDuration);\n\n    YieldGate public gate;\n    address public beneficiary;\n\n    // Minimum required amount to stake.\n    uint256 public minAmount;\n    // Minimum required staking duration (in seconds).\n    uint256 public minDuration;\n    // Records when a supporter is allowed to unstake again. This has the added\n    // benefit that future changes to the duration do not affect current stakes.\n    mapping(address => uint256) internal lockTimeouts;\n\n    // supporter => amount\n    mapping(address => uint256) public stakes;\n    // total staked amount\n    uint256 internal totalStake;\n\n    modifier onlyBeneficiary() {\n        require(msg.sender == beneficiary, \"only beneficiary\");\n        _;\n    }\n\n    // Initializes this contract's parameters after deployment. This is called\n    // by the pool factory, i.e. the Yieldgate main contract, right after\n    // deployment. Can only be called once.\n    function init(address _gate, address _beneficiary) public {\n        require(address(gate) == address(0), \"already initialized\");\n\n        gate = YieldGate(_gate);\n        beneficiary = _beneficiary;\n\n        emitParametersChanged(0, 0);\n    }\n\n    // To save gas, add individual parameter setters.\n\n    function setMinAmount(uint256 _minAmount) external onlyBeneficiary {\n        minAmount = _minAmount;\n        emitParametersChanged(_minAmount, minDuration);\n    }\n\n    function setMinDuration(uint256 _minDuration) external onlyBeneficiary {\n        minDuration = _minDuration;\n        emitParametersChanged(minAmount, _minDuration);\n    }\n\n    function setParameters(uint256 _minAmount, uint256 _minDuration) external onlyBeneficiary {\n        minAmount = _minAmount;\n        minDuration = _minDuration;\n        emitParametersChanged(_minAmount, _minDuration);\n    }\n\n    function emitParametersChanged(uint256 _minAmount, uint256 _minDuration) internal {\n        emit ParametersChanged(beneficiary, _minAmount, _minDuration);\n    }\n\n    // Stakes the sent ether on behalf of the provided supporter. The supporter\n    // is usually msg.sender if staking on the transaction sender's behalf.\n    // The staking timeout is reset on each call, so prior stake is re-locked.\n    function stake(address supporter) public payable {\n        uint256 amount = msg.value;\n        require(amount > 0 && stakes[supporter] + amount >= minAmount, \"amount too low\");\n\n        stakes[supporter] += amount;\n        totalStake += amount;\n        uint256 timeout = 0;\n        if (minDuration > 0) {\n            timeout = block.timestamp + minDuration;\n        }\n        lockTimeouts[supporter] = timeout;\n\n        gate.wethgw().depositETH{value: amount}(gate.aavePool(), address(this), 0);\n        emit Staked(beneficiary, supporter, amount, timeout);\n    }\n\n    // Unstakes all previously staked ether by the calling supporter.\n    // The beneficiary keeps all generated yield.\n    // If a minimum staking duration was set by the beneficiary at the time of\n    // staking, it is checked that the timeout has elapsed.\n    function unstake() public returns (uint256) {\n        address supporter = msg.sender;\n        require(block.timestamp >= lockTimeout(supporter), \"stake still locked\");\n\n        uint256 amount = stakes[supporter];\n        require(amount > 0, \"no supporter\");\n\n        stakes[supporter] = 0;\n        totalStake -= amount;\n\n        withdraw(amount, supporter);\n        emit Unstaked(beneficiary, supporter, amount);\n        return amount;\n    }\n\n    // claim sends the accrued interest to the beneficiary of this pool. Staked\n    // ether remains at the yield pool and continues generating yield.\n    function claim() public onlyBeneficiary returns (uint256) {\n        uint256 amount = claimable();\n        withdraw(amount, beneficiary);\n        emit Claimed(beneficiary, amount);\n        return amount;\n    }\n\n    function withdraw(uint256 amount, address receiver) internal {\n        require(gate.token().approve(address(gate.wethgw()), amount), \"ethgw approval failed\");\n        gate.wethgw().withdrawETH(gate.aavePool(), amount, receiver);\n    }\n\n    // claimable returns the total earned ether by the provided beneficiary.\n    // It is the accrued interest on all staked ether.\n    // It can be withdrawn by the beneficiary with claim.\n    function claimable() public view returns (uint256) {\n        return gate.token().balanceOf(address(this)) - staked();\n    }\n\n    // staked returns the total staked ether by this beneficiary pool.\n    function staked() public view returns (uint256) {\n        return totalStake;\n    }\n\n    // lockTimeout returns the effective timeout until when a supporter's stake\n    // is locked. If the minDuration is 0 it is always 0, possibly disregarding\n    // an old lock from prior staking when minDuration was > 0.\n    function lockTimeout(address supporter) public view returns (uint256) {\n        // Set timeout to 0 if minDuration == 0 because a supporter could then\n        // trivially reset their lock timeout by staking and then immediately\n        // unstaking anyways.\n        if (minDuration == 0) {\n            return 0;\n        }\n        return lockTimeouts[supporter];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}