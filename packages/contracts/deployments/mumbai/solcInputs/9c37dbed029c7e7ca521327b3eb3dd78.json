{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/deps/Aave.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IWETHGateway {\n    function depositETH(\n        address pool,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external payable;\n\n    function withdrawETH(\n        address pool,\n        uint256 amount,\n        address onBehalfOf\n    ) external;\n}\n\n/**\n * @title IPoolAddressesProvider\n * @author Aave\n * @notice Defines the basic interface for a Pool Addresses Provider.\n * https://github.com/aave/aave-v3-core/blob/master/contracts/interfaces/IPoolAddressesProvider.sol\n **/\ninterface IAavePoolAddressesProvider {\n    /**\n     * @notice Returns the address of the Pool proxy.\n     * @return The Pool proxy address\n     **/\n    function getPool() external view returns (address);\n}\n\n// https://github.com/aave/aave-v3-core/blob/master/contracts/interfaces/IPool.sol\ninterface IAavePool {\n    /**\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function supply(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n     * @param to The address that will receive the underlying, same as msg.sender if the user\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n     *   different wallet\n     * @return The final amount withdrawn\n     **/\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @notice Returns the state and configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The state and configuration data of the reserve\n     **/\n    function getReserveData(address asset) external view returns (AaveDataTypes.ReserveData memory);\n}\n\n// https://github.com/aave/aave-v3-core/blob/master/contracts/protocol/libraries/types/DataTypes.sol\nlibrary AaveDataTypes {\n    struct ReserveData {\n        //stores the reserve configuration\n        ReserveConfigurationMap configuration;\n        //the liquidity index. Expressed in ray\n        uint128 liquidityIndex;\n        //the current supply rate. Expressed in ray\n        uint128 currentLiquidityRate;\n        //variable borrow index. Expressed in ray\n        uint128 variableBorrowIndex;\n        //the current variable borrow rate. Expressed in ray\n        uint128 currentVariableBorrowRate;\n        //the current stable borrow rate. Expressed in ray\n        uint128 currentStableBorrowRate;\n        //timestamp of last update\n        uint40 lastUpdateTimestamp;\n        //the id of the reserve. Represents the position in the list of the active reserves\n        uint16 id;\n        //aToken address\n        address aTokenAddress;\n        //stableDebtToken address\n        address stableDebtTokenAddress;\n        //variableDebtToken address\n        address variableDebtTokenAddress;\n        //address of the interest rate strategy\n        address interestRateStrategyAddress;\n        //the current treasury balance, scaled\n        uint128 accruedToTreasury;\n        //the outstanding unbacked aTokens minted through the bridging feature\n        uint128 unbacked;\n        //the outstanding debt borrowed against this asset in isolation mode\n        uint128 isolationModeTotalDebt;\n    }\n\n    struct ReserveConfigurationMap {\n        //bit 0-15: LTV\n        //bit 16-31: Liq. threshold\n        //bit 32-47: Liq. bonus\n        //bit 48-55: Decimals\n        //bit 56: reserve is active\n        //bit 57: reserve is frozen\n        //bit 58: borrowing is enabled\n        //bit 59: stable rate borrowing enabled\n        //bit 60: asset is paused\n        //bit 61: borrowing in isolation mode is enabled\n        //bit 62-63: reserved\n        //bit 64-79: reserve factor\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\n        //bit 152-167 liquidation protocol fee\n        //bit 168-175 eMode category\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\n        //bit 252-255 unused\n\n        uint256 data;\n    }\n}\n"
    },
    "contracts/deps/Toucan.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IToucanOffsetHelper {\n    /**\n     * @notice Emitted upon successful redemption of TCO2 tokens from a Toucan\n     * pool token such as BCT or NCT.\n     *\n     * @param who The sender of the transaction\n     * @param poolToken The address of the Toucan pool token used in the\n     * redemption, for example, NCT or BCT\n     * @param tco2s An array of the TCO2 addresses that were redeemed\n     * @param amounts An array of the amounts of each TCO2 that were redeemed\n     */\n    event Redeemed(address who, address poolToken, address[] tco2s, uint256[] amounts);\n\n    /**\n     * @notice Retire carbon credits using the lowest quality (oldest) TCO2\n     * tokens available from the specified Toucan token pool by sending ERC20\n     * tokens (USDC, WETH, WMATIC). All provided token is consumed for\n     * offsetting.\n     *\n     * This function:\n     * 1. Swaps the ERC20 token sent to the contract for the specified pool token.\n     * 2. Redeems the pool token for the poorest quality TCO2 tokens available.\n     * 3. Retires the TCO2 tokens.\n     *\n     * Note: The client must approve the ERC20 token that is sent to the contract.\n     *\n     * @dev When automatically redeeming pool tokens for the lowest quality\n     * TCO2s there are no fees and you receive exactly 1 TCO2 token for 1 pool\n     * token.\n     *\n     * @param _fromToken The address of the ERC20 token that the user sends\n     * (must be one of USDC, WETH, WMATIC)\n     * @param _amountToSwap The amount of ERC20 token to swap into Toucan pool\n     * token. Full amount will be used for offsetting.\n     * @param _poolToken The address of the Toucan pool token that the\n     * user wants to use, for example, NCT or BCT\n     *\n     * @return tco2s An array of the TCO2 addresses that were redeemed\n     * @return amounts An array of the amounts of each TCO2 that were redeemed\n     */\n    function autoOffsetExactInToken(\n        address _fromToken,\n        uint256 _amountToSwap,\n        address _poolToken\n    ) external returns (address[] memory tco2s, uint256[] memory amounts);\n\n    /**\n     * @notice Calculates the expected amount of Toucan Pool token that can be\n     * acquired by swapping the provided amount of ERC20 token.\n     *\n     * @param _fromToken The address of the ERC20 token used for the swap\n     * @param _fromAmount The amount of ERC20 token to swap\n     * @param _toToken The address of the pool token to swap for,\n     * for example, NCT or BCT\n     * @return The expected amount of Pool token that can be acquired\n     */\n    function calculateExpectedPoolTokenForToken(\n        address _fromToken,\n        uint256 _fromAmount,\n        address _toToken\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ITokenPool.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/**\n * @title Yieldgate Token Pool Interface\n * @author Sebastian Stammler <seb@yieldgate.xyz>\n */\ninterface ITokenPool {\n    /**\n     * @notice Staked is emitted on every successful stake.\n     * @param token Address of staked ERC20 token.\n     * @param supporter Addrses of staker.\n     * @param amount Amount that got staked.\n     */\n    event Staked(address indexed token, address indexed supporter, uint256 amount);\n\n    /**\n     * @notice Unstaked is cool\n     * @param token Address of unstaked ERC20 token.\n     * @param supporter Addrses of unstaker.\n     * @param amount Amount that got unstaked.\n     */\n    event Unstaked(address indexed token, address indexed supporter, uint256 amount);\n\n    /**\n     * @notice Claimed is emitted on every successful claim.\n     * @param token Address of claimed ERC20 token.\n     * @param amount Amount that got claimed.\n     */\n    event Claimed(address indexed token, uint256 amount);\n\n    /**\n     * @notice Returns the beneficiary of this pool.\n     * @dev Usually this is implemented as a public (immutable) address storage\n     * variable.\n     */\n    function beneficiary() external view returns (address);\n\n    /**\n     * @notice Stakes given amount of token on behalf of the provided supporter.\n     * @dev Prio to calling stake, a respective allowance for the token pool has\n     *   to be set. On success, the implementation must emit a Staked event.\n     * @param token Address of ERC20 token to stake.\n     * @param supporter The supporter on whose behalf the token is staked.\n     * @param amount The amount of token to stake.\n     */\n    function stake(\n        address token,\n        address supporter,\n        uint256 amount\n    ) external;\n\n    /**\n     * @notice Unstakes all previously staked token by the calling supporter.\n     *   The beneficiary keeps all generated yield.\n     * @dev On success, the implementation must emit an Unstaked event.\n     * @param token Address of ERC20 token to unstake.\n     * @return Returns the unstaked amount.\n     */\n    function unstake(address token) external returns (uint256);\n\n    /**\n     * @notice Sends the accrued yield to the beneficiary of this pool.\n     * @dev The implementation should enforce some access control to this\n     *   function, e.g., only let it be callable by the beneficiary. It must\n     *   emit a Claimed event on success.\n     * @param token Address of ERC20 token to claim.\n     * @return Returns the claimed amount of yield.\n     */\n    function claim(address token) external returns (uint256);\n\n    /**\n     * @notice Queries the claimable yield for the given ERC20 token.\n     * @param token Address of ERC20 token to query.\n     * @return Returns the claimable yield.\n     */\n    function claimable(address token) external view returns (uint256);\n\n    /**\n     * @notice Queries the total staked amount for the given ERC20 token.\n     * @param token Address of ERC20 token to query.\n     * @return Returns the total staked amount.\n     */\n    function staked(address token) external view returns (uint256);\n}\n"
    },
    "contracts/test/AaveMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {IAavePoolAddressesProvider, IAavePool, AaveDataTypes} from \"../deps/Aave.sol\";\n\n/**\n * @title AavePool and aToken mock for testnets\n * @author Sebastian Stammler\n * @notice AaveMock mocks the Aave Pool, PoolAddressesProvider and also is the\n * aToken for a single external ERC20 reference token.\n * @dev Reference token deposited into this contract with function `supply`\n * yields an emulated linear return until a specified doubling time, from which\n * point on it stays the same until another action changes the token balance\n * again, either in- or decreasing it.\n * The AaveMock is also the aToken of the reference token.\n */\ncontract AaveMock is IAavePool, IAavePoolAddressesProvider, ERC20, Ownable {\n    using SafeERC20 for IERC20Metadata;\n    using Math for uint256;\n\n    IERC20Metadata public immutable rToken;\n    uint256 public doublingDuration;\n\n    mapping(address => uint256) private lastBalanceUpdate; // account -> timestamp\n\n    modifier onlyRToken(address token) {\n        require(token == address(rToken), \"only rToken allowed\");\n        _;\n    }\n\n    constructor(address _rToken, uint256 _doublingDuration)\n        ERC20(\"Stake for Earth Testnet aToken\", \"aSFE\")\n    {\n        rToken = IERC20Metadata(_rToken);\n        doublingDuration = _doublingDuration;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return rToken.decimals();\n    }\n\n    function getPool() external view returns (address) {\n        return address(this);\n    }\n\n    function setDoublingDuration(uint256 _doublingDuration) external onlyOwner {\n        doublingDuration = _doublingDuration;\n    }\n\n    function supply(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 /* referralCode */\n    ) external onlyRToken(asset) {\n        rToken.safeTransferFrom(msg.sender, address(this), amount);\n        updateBalance(onBehalfOf);\n        _mint(onBehalfOf, amount);\n    }\n\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external onlyRToken(asset) returns (uint256) {\n        address account = msg.sender;\n        if (amount == type(uint256).max) {\n            amount = balanceOf(account);\n        }\n        updateBalance(account);\n        _burn(account, amount);\n        // TODO: only works if target token is minted after balance update\n        rToken.safeTransfer(to, amount);\n        return amount;\n    }\n\n    function updateBalance(address account) internal {\n        uint256 balance = ERC20.balanceOf(account);\n        lastBalanceUpdate[account] = block.timestamp;\n        if (balance == 0) return; // initial update\n\n        uint256 newBalance = balanceOf(account);\n        _mint(account, newBalance - balance);\n    }\n\n    // Let balanceOf peek into the future, so that claimable() works\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        uint256 lastUpdate = lastBalanceUpdate[account];\n        uint256 balance = ERC20.balanceOf(account);\n        uint256 diff = block.timestamp - lastUpdate;\n        if (lastUpdate == 0 || balance == 0 || diff == 0) return balance;\n\n        if (diff > doublingDuration) {\n            diff = doublingDuration;\n        }\n\n        return balance.mulDiv(doublingDuration + diff, doublingDuration);\n    }\n\n    function getReserveData(address asset)\n        external\n        view\n        onlyRToken(asset)\n        returns (AaveDataTypes.ReserveData memory data)\n    {\n        data.aTokenAddress = address(this);\n        return data;\n    }\n}\n"
    },
    "contracts/test/ERC20AutoMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title ERC20AutoMinter\n * @author Sebastian Stammler\n * @notice This token automatically mints new token when approvals are set or\n * transfers are made, up to a specified maximum.\n * Anyone can also mint token to themselves using function mintMe or to anyone\n * else using function mint.\n * @dev Only the contract owner can reset the max. mint amount.\n */\nabstract contract ERC20AutoMinter is ERC20, Ownable {\n    uint256 public maxMint;\n\n    constructor(uint256 _maxMint) {\n        maxMint = _maxMint;\n    }\n\n    function setMaxMint(uint256 _maxMint) external onlyOwner {\n        maxMint = _maxMint;\n    }\n\n    // approve auto-mints up to maxMint token to the caller\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        mintMe(amount);\n        return ERC20.approve(spender, amount);\n    }\n\n    // transfer auto-mints up to maxMint token to the caller\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        mintMe(amount);\n        return ERC20.transfer(to, amount);\n    }\n\n    // anyone can mint themselves up to maxMint token\n    function mintMe(uint256 amount) public returns (uint256) {\n        return mint(_msgSender(), amount);\n    }\n\n    // anyone can mint anyone else up to maxMint token\n    function mint(address account, uint256 amount) public returns (uint256) {\n        uint256 mintAmount = maxAmount(amount);\n        _mint(account, mintAmount);\n        return mintAmount;\n    }\n\n    function maxAmount(uint256 amount) internal view returns (uint256) {\n        return amount > maxMint ? maxMint : amount;\n    }\n}\n\ncontract SFETestUSD is ERC20AutoMinter {\n    constructor(uint256 maxMint)\n        ERC20AutoMinter(maxMint)\n        ERC20(\"Stake for Earth Testnet USD\", \"SFE\")\n    {} // solhint-disable-line no-empty-blocks\n\n    function decimals() public view virtual override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/test/imports.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n"
    },
    "contracts/test/OffsetHelperMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {IToucanOffsetHelper} from \"../deps/Toucan.sol\";\n\n/**\n * @title Toucan OffsetHelper mock\n * @author Sebastian Stammler\n * @notice Mocks offsetting by any token by transferring the token to this\n * contract and then emitting a mock Redeemed event.\n * @dev The contract owner can set rates for individual tokens with setRate. If\n * no rate is set, a default rate of 1 will be used.\n * The Redeemed event will have two TCO2 entries, which the TCO2 addresses being\n * the provided pool token address +1 and +2.\n */\ncontract OffsetHelperMock is IToucanOffsetHelper, Ownable {\n    using SafeERC20 for IERC20Metadata;\n    using Math for uint256;\n\n    struct Rate {\n        uint256 mult;\n        uint256 denom;\n    }\n\n    mapping(address => Rate) internal rates;\n\n    function setRate(\n        address token,\n        uint256 rateMult,\n        uint256 rateDenom\n    ) external onlyOwner {\n        rates[token] = Rate({mult: rateMult, denom: rateDenom});\n    }\n\n    function autoOffsetExactInToken(\n        address _fromToken,\n        uint256 _amountToSwap,\n        address _poolToken\n    ) external returns (address[] memory tco2s, uint256[] memory amounts) {\n        IERC20Metadata(_fromToken).safeTransferFrom(msg.sender, address(this), _amountToSwap);\n        uint256 amount = calculateExpectedPoolTokenForToken(_fromToken, _amountToSwap, _poolToken);\n        (tco2s, amounts) = mockTCO2s(_poolToken, amount);\n        emit Redeemed(msg.sender, _poolToken, tco2s, amounts);\n    }\n\n    function calculateExpectedPoolTokenForToken(\n        address _fromToken,\n        uint256 _fromAmount,\n        address /* _toToken ignored */\n    ) public view returns (uint256) {\n        Rate memory rate = rates[_fromToken];\n        if (rate.mult == 0) {\n            // if no rate set, default rate is 1/1\n            return _fromAmount;\n        }\n        return _fromAmount.mulDiv(rate.mult, rate.denom);\n    }\n\n    function mockTCO2s(address tokenBase, uint256 amount)\n        internal\n        pure\n        returns (address[] memory tco2s, uint256[] memory amounts)\n    {\n        (tco2s, amounts) = (new address[](2), new uint256[](2));\n        uint160 base = uint160(tokenBase);\n        tco2s[0] = address(base + 1);\n        tco2s[1] = address(base + 2);\n        uint256 half = amount / 2;\n        amounts[0] = half;\n        amounts[1] = amount - half;\n    }\n}\n"
    },
    "contracts/TokenPool.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ITokenPool} from \"./interfaces/ITokenPool.sol\";\nimport {IAavePool, IAavePoolAddressesProvider} from \"./deps/Aave.sol\";\n\n/**\n * @title Yieldgate Token Pool\n * @author Sebastian Stammler\n * @notice Users can stake any token on the TokenPool while a designated\n * beneficiary can claim any generated yield. Users can unstake their previously\n * staked tokens at any time. Aave is used as a yield generator.\n * @dev Prior to staking a new token, the AavePool has to be approved as a\n * spender of this contract's token once by calling approvePool with the token\n * address. The alternative constructor contract TokenPoolWithApproval can be\n * used to deploy this contract and approve a list of tokens at the same time.\n */\ncontract TokenPool is ITokenPool {\n    /*\n     * @notice Provider of AAVE protocol contract instance addresses. This\n     *   address is fixed for a particular market.\n     * @dev Since the actual AAVE Pool address is subject to change, AAVE\n     *   advices to always read the pool address from the PoolAddressesProvider.\n     */\n    IAavePoolAddressesProvider public immutable aavePoolAddressesProvider;\n\n    /*\n     * @notice address of beneficiary that can claim generated yield.\n     */\n    address public immutable beneficiary;\n\n    /*\n     * @notice Amount staked by token and by user.\n     * @dev Mapping format is token address -> user -> amount.\n     */\n    mapping(address => mapping(address => uint256)) public stakes;\n\n    // Total stake, by token address.\n    mapping(address => uint256) internal totalStake;\n\n    modifier onlyBeneficiary() {\n        require(msg.sender == beneficiary, \"only beneficiary\");\n        _;\n    }\n\n    constructor(address _aavePoolAddressesProvider, address _beneficiary) {\n        aavePoolAddressesProvider = IAavePoolAddressesProvider(_aavePoolAddressesProvider);\n        beneficiary = _beneficiary;\n    }\n\n    /*\n     * @notice Approves the Aave Pool to spend the given token on behalf of this\n     * token pool. Trusting the Aave pool implementation, the maximum allowance\n     * is set to save on repeated approve calls.\n     * @dev Has to be called once before staking a new token, by any user.\n     * A new call would be necessary in the unlikely event that the Aave pool\n     * proxy address, returned by the PoolAddressesProvider, changes.\n     */\n    function approvePool(address token) public {\n        require(\n            IERC20(token).approve(address(aavePool()), type(uint256).max),\n            \"AavePool approval failed\"\n        );\n    }\n\n    /**\n     * @inheritdoc ITokenPool\n     * @dev Prio to calling stake, a respective allowance for the token pool has\n     * to be set.\n     * When staking a token for the first time, the (infinite) ERC20 allowance\n     * for the Aave Pool has to be approved first by calling function\n     * approvePool (with any user). stake emits a Staked event on success.\n     */\n    function stake(\n        address token,\n        address supporter,\n        uint256 amount\n    ) public virtual {\n        require(amount > 0, \"zero amount\");\n\n        stakes[token][supporter] += amount;\n        totalStake[token] += amount;\n\n        require(\n            IERC20(token).transferFrom(msg.sender, address(this), amount),\n            \"token transfer failed\"\n        );\n        // For the next step to succeed, approvePool must have been called once before.\n        aavePool().supply(token, amount, address(this), 0);\n\n        emit Staked(token, supporter, amount);\n    }\n\n    /// @inheritdoc ITokenPool\n    function unstake(address token) public virtual returns (uint256) {\n        address supporter = msg.sender;\n        uint256 amount = stakes[token][supporter];\n        require(amount > 0, \"no supporter\");\n\n        stakes[token][supporter] = 0;\n        totalStake[token] -= amount;\n\n        withdraw(token, amount, supporter);\n\n        emit Unstaked(token, supporter, amount);\n        return amount;\n    }\n\n    /**\n     * @inheritdoc ITokenPool\n     * @dev Emits a Claimed event on success. Only callable by the beneficiary.\n     */\n    function claim(address token) public virtual onlyBeneficiary returns (uint256) {\n        uint256 amount = claimable(token);\n        withdraw(token, amount, beneficiary);\n\n        emit Claimed(token, amount);\n        return amount;\n    }\n\n    function withdraw(\n        address token,\n        uint256 amount,\n        address receiver\n    ) internal {\n        aavePool().withdraw(token, amount, receiver);\n    }\n\n    /// @inheritdoc ITokenPool\n    function claimable(address token) public view returns (uint256) {\n        IERC20 aToken = IERC20(aavePool().getReserveData(token).aTokenAddress);\n        return aToken.balanceOf(address(this)) - staked(token);\n    }\n\n    /// @inheritdoc ITokenPool\n    function staked(address token) public view returns (uint256) {\n        return totalStake[token];\n    }\n\n    function aavePool() internal view returns (IAavePool) {\n        return IAavePool(aavePoolAddressesProvider.getPool());\n    }\n}\n\n/**\n * @dev The TokenPoolWithApproval is the same contract as the\n * TokenPool while its constructor also approves the aavePool to spend the\n * provided list of tokens on behalf of this TokenPool.\n */\ncontract TokenPoolWithApproval is TokenPool {\n    constructor(\n        address _aavePoolAddressesProvider,\n        address _beneficiary,\n        address[] memory _approvedTokens\n    ) TokenPool(_aavePoolAddressesProvider, _beneficiary) {\n        for (uint256 i = 0; i < _approvedTokens.length; i++) approvePool(_approvedTokens[i]);\n    }\n}\n"
    },
    "contracts/ToucanOffsetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./deps/Toucan.sol\";\n\nimport \"./TokenPool.sol\";\nimport \"./interfaces/ITokenPool.sol\";\n\n/**\n * @title Yieldgate Toucan Offsetter\n * @author Sebastian Stammler\n * @notice The Toucan Offsetter contract is designed to be the beneficiary of a\n * Yieldgate TokenPool, forwarding all generated yield to Toucan for carbon\n * offsetting.\n * @dev The beneficiary is set at deployment of a TokenPool. For that reason,\n * the ToucanOffsetter has to be deployed first, then the TokenPool with the\n * just deployed ToucanOffsetter as beneficiary and then finally the TokenPool\n * has to be set using setYGPool.\n * The alternative constructors of ToucanOffsetterPoolDeployment or\n * ToucanOffsetterPoolDeploymentApproval can be used to automate this process\n * within a single deployment transaction.\n */\ncontract ToucanOffsetter is AccessControl {\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice Offsetters are allowed to call offsetYield. Only this contract's\n     *   admin can grant this role to new addresses.\n     */\n    bytes32 public constant OFFSET_ROLE = keccak256(\"OFFSET_ROLE\");\n\n    /// @notice TokenPool from which yield is claimed.\n    ITokenPool public pool;\n\n    /// @notice Toucan OffsetHelper contract that is used for offsetting claimed yield.\n    IToucanOffsetHelper public offsetHelper;\n\n    /**\n     * @notice YGPoolSet is emitted when the yieldgate pool is (re)set.\n     * @param pool Address of Yieldgate pool.\n     */\n    event YGPoolSet(address indexed pool);\n\n    /**\n     * @notice Offset is emitted when yield has been claimed from the\n     * TokenPool and used for offsetting via Toucan offset tokens.\n     * @dev The last parameter offset only contains the sum of all offset TCO2s.\n     * If individual TCO2s and amounts are of interest to the application, read\n     * the Redeemed event emitted by the Toucan OffsetHelper.\n     * @param token Address of input token that got swapped into Toucan offset token.\n     * @param yield Amount of yield that got swapped.\n     * @param offsetToken Toucan offset token that got redeemed.\n     * @param offset Total sum of TCO2s that got offset.\n     */\n    event Offset(address indexed token, uint256 yield, address indexed offsetToken, uint256 offset);\n\n    modifier onlyAdmin() {\n        _checkRole(DEFAULT_ADMIN_ROLE);\n        _;\n    }\n\n    /**\n     * @notice Deploys the ToucanOffsetter with given Toucan OffsetHelper.\n     * @dev TokenPool has to be deployed afterwards, setting this\n     * ToucanOffsetter as beneficiary. Then setYGPool has to be called with the\n     * TokenPool's address. ToucanOffsetterPoolDeployment can be used instead to\n     * bundle this behavior.\n     * The deployer is set as admin and also granted the offsetter role.\n     * @param _toucanOffsettHelper Address of Toucan OffsetHelper.\n     */\n    constructor(address _toucanOffsettHelper) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(OFFSET_ROLE, msg.sender);\n\n        offsetHelper = IToucanOffsetHelper(_toucanOffsettHelper);\n    }\n\n    /**\n     * @notice Sets the Yieldgate TokenPool.\n     * @dev Can only be set by the admin.\n     * @param _pool TokenPool address.\n     */\n    function setYGPool(address _pool) external onlyAdmin {\n        _setYGPool(_pool);\n    }\n\n    function _setYGPool(address _pool) internal {\n        pool = ITokenPool(_pool);\n        emit YGPoolSet(_pool);\n    }\n\n    /**\n     * @notice offsetYield claims all accrued yield from the TokenPool and then\n     * uses the OffsetHelper to swap and retire the yield into Toucan offset\n     * token.\n     * @dev Emits an Offset event. Caller must have OFFSET_ROLE.\n     * @param token Token to claim yield for from the TokenPool.\n     * @param offsetToken Toucan offset token to use for offsetting (BCT, NCT, ...).\n     */\n    function offsetYield(address token, address offsetToken)\n        external\n        virtual\n        onlyRole(OFFSET_ROLE)\n    {\n        uint256 yield = pool.claim(token);\n        IERC20(token).safeApprove(address(offsetHelper), yield);\n        (, uint256[] memory amounts) = offsetHelper.autoOffsetExactInToken(\n            token,\n            yield,\n            offsetToken\n        );\n\n        uint256 offset;\n        for (uint256 i = 0; i < amounts.length; i++) offset += amounts[i];\n        emit Offset(token, yield, offsetToken, offset);\n    }\n}\n\n/**\n * @dev The ToucanOffsetterPoolDeployment is the same contract as the\n * ToucanOffsetter while its constructor also deploys its own TokenPool, setting\n * it as its pool during deployment.\n */\ncontract ToucanOffsetterWithPoolDeployment is ToucanOffsetter {\n    constructor(address _toucanOffsettHelper, address _aavePoolAddressesProvider)\n        ToucanOffsetter(_toucanOffsettHelper)\n    {\n        // deploy own pool\n        pool = new TokenPool(_aavePoolAddressesProvider, address(this));\n        _setYGPool(address(pool));\n    }\n}\n\n/**\n * @dev The ToucanOffsetterPoolDeploymentApproval is the same contract as the\n * ToucanOffsetter while its constructor also deploys its own TokenPool, setting\n * it as its pool during deployment and approves the Aave pool to transfer the\n * provided list of tokens on behalf of the TokenPool.\n */\ncontract ToucanOffsetterWithPoolDeploymentApproval is ToucanOffsetter {\n    constructor(\n        address _toucanOffsettHelper,\n        address _aavePoolAddressesProvider,\n        address[] memory _approvedTokens\n    ) ToucanOffsetter(_toucanOffsettHelper) {\n        // deploy own pool\n        pool = new TokenPoolWithApproval(\n            _aavePoolAddressesProvider,\n            address(this),\n            _approvedTokens\n        );\n        _setYGPool(address(pool));\n    }\n}\n"
    },
    "contracts/YieldGate.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport {IWETHGateway} from \"./deps/Aave.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\n\ncontract YieldGate {\n    event PoolDeployed(address indexed beneficiary, address indexed deployer, address pool);\n\n    address private immutable beneficiaryPoolLib;\n    address public immutable aavePool;\n    IWETHGateway public immutable wethgw;\n    IERC20 public immutable token;\n\n    // beneficiary => BeneficiaryPool\n    mapping(address => BeneficiaryPool) public beneficiaryPools;\n\n    constructor(\n        address _pool,\n        address wethGateway,\n        address aWETH\n    ) {\n        aavePool = _pool;\n        wethgw = IWETHGateway(wethGateway);\n        token = IERC20(aWETH);\n\n        BeneficiaryPool bp = new BeneficiaryPool();\n        // init it so no one else can (RIP Parity Multisig)\n        bp.init(address(this), msg.sender);\n        beneficiaryPoolLib = address(bp);\n    }\n\n    function deployPool(address beneficiary) external returns (address) {\n        BeneficiaryPool bpool = BeneficiaryPool(Clones.clone(beneficiaryPoolLib));\n        bpool.init(address(this), beneficiary);\n        beneficiaryPools[beneficiary] = bpool;\n\n        emit PoolDeployed(beneficiary, msg.sender, address(bpool));\n        return address(bpool);\n    }\n\n    // claimable returns the total earned ether by the provided beneficiary.\n    // It is the accrued interest on all staked ether.\n    // It can be withdrawn by the beneficiary with claim.\n    function claimable(address beneficiary) public view returns (uint256) {\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\n        if (address(bpool) == address(0)) {\n            return 0;\n        }\n        return bpool.claimable();\n    }\n\n    // staked returns the total staked ether on behalf of the beneficiary.\n    function staked(address beneficiary) public view returns (uint256) {\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\n        if (address(bpool) == address(0)) {\n            return 0;\n        }\n        return bpool.staked();\n    }\n\n    // returns the total staked ether by the supporter and the timeout until\n    // which the stake is locked.\n    function supporterStaked(address supporter, address beneficiary)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\n        if (address(bpool) == address(0)) {\n            return (0, 0);\n        }\n        return (bpool.stakes(supporter), bpool.lockTimeout(supporter));\n    }\n}\n\ncontract BeneficiaryPool {\n    event Staked(\n        address indexed beneficiary,\n        address indexed supporter,\n        uint256 amount,\n        uint256 lockTimeout\n    );\n    event Unstaked(address indexed beneficiary, address indexed supporter, uint256 amount);\n    event Claimed(address indexed beneficiary, uint256 amount);\n    event ParametersChanged(address indexed beneficiary, uint256 minAmount, uint256 minDuration);\n\n    YieldGate public gate;\n    address public beneficiary;\n\n    // Minimum required amount to stake.\n    uint256 public minAmount;\n    // Minimum required staking duration (in seconds).\n    uint256 public minDuration;\n    // Records when a supporter is allowed to unstake again. This has the added\n    // benefit that future changes to the duration do not affect current stakes.\n    mapping(address => uint256) internal lockTimeouts;\n\n    // supporter => amount\n    mapping(address => uint256) public stakes;\n    // total staked amount\n    uint256 internal totalStake;\n\n    modifier onlyBeneficiary() {\n        require(msg.sender == beneficiary, \"only beneficiary\");\n        _;\n    }\n\n    // Initializes this contract's parameters after deployment. This is called\n    // by the pool factory, i.e. the Yieldgate main contract, right after\n    // deployment. Can only be called once.\n    function init(address _gate, address _beneficiary) public {\n        require(address(gate) == address(0), \"already initialized\");\n\n        gate = YieldGate(_gate);\n        beneficiary = _beneficiary;\n\n        emitParametersChanged(0, 0);\n    }\n\n    // To save gas, add individual parameter setters.\n\n    function setMinAmount(uint256 _minAmount) external onlyBeneficiary {\n        minAmount = _minAmount;\n        emitParametersChanged(_minAmount, minDuration);\n    }\n\n    function setMinDuration(uint256 _minDuration) external onlyBeneficiary {\n        minDuration = _minDuration;\n        emitParametersChanged(minAmount, _minDuration);\n    }\n\n    function setParameters(uint256 _minAmount, uint256 _minDuration) external onlyBeneficiary {\n        minAmount = _minAmount;\n        minDuration = _minDuration;\n        emitParametersChanged(_minAmount, _minDuration);\n    }\n\n    function emitParametersChanged(uint256 _minAmount, uint256 _minDuration) internal {\n        emit ParametersChanged(beneficiary, _minAmount, _minDuration);\n    }\n\n    // Stakes the sent ether on behalf of the provided supporter. The supporter\n    // is usually msg.sender if staking on the transaction sender's behalf.\n    // The staking timeout is reset on each call, so prior stake is re-locked.\n    function stake(address supporter) public payable {\n        uint256 amount = msg.value;\n        require(amount > 0 && stakes[supporter] + amount >= minAmount, \"amount too low\");\n\n        stakes[supporter] += amount;\n        totalStake += amount;\n        uint256 timeout = 0;\n        if (minDuration > 0) {\n            timeout = block.timestamp + minDuration;\n        }\n        lockTimeouts[supporter] = timeout;\n\n        gate.wethgw().depositETH{value: amount}(gate.aavePool(), address(this), 0);\n        emit Staked(beneficiary, supporter, amount, timeout);\n    }\n\n    // Unstakes all previously staked ether by the calling supporter.\n    // The beneficiary keeps all generated yield.\n    // If a minimum staking duration was set by the beneficiary at the time of\n    // staking, it is checked that the timeout has elapsed.\n    function unstake() public returns (uint256) {\n        address supporter = msg.sender;\n        require(block.timestamp >= lockTimeout(supporter), \"stake still locked\");\n\n        uint256 amount = stakes[supporter];\n        require(amount > 0, \"no supporter\");\n\n        stakes[supporter] = 0;\n        totalStake -= amount;\n\n        withdraw(amount, supporter);\n        emit Unstaked(beneficiary, supporter, amount);\n        return amount;\n    }\n\n    // claim sends the accrued interest to the beneficiary of this pool. Staked\n    // ether remains at the yield pool and continues generating yield.\n    function claim() public onlyBeneficiary returns (uint256) {\n        uint256 amount = claimable();\n        withdraw(amount, beneficiary);\n        emit Claimed(beneficiary, amount);\n        return amount;\n    }\n\n    function withdraw(uint256 amount, address receiver) internal {\n        require(gate.token().approve(address(gate.wethgw()), amount), \"ethgw approval failed\");\n        gate.wethgw().withdrawETH(gate.aavePool(), amount, receiver);\n    }\n\n    // claimable returns the total earned ether by the provided beneficiary.\n    // It is the accrued interest on all staked ether.\n    // It can be withdrawn by the beneficiary with claim.\n    function claimable() public view returns (uint256) {\n        return gate.token().balanceOf(address(this)) - staked();\n    }\n\n    // staked returns the total staked ether by this beneficiary pool.\n    function staked() public view returns (uint256) {\n        return totalStake;\n    }\n\n    // lockTimeout returns the effective timeout until when a supporter's stake\n    // is locked. If the minDuration is 0 it is always 0, possibly disregarding\n    // an old lock from prior staking when minDuration was > 0.\n    function lockTimeout(address supporter) public view returns (uint256) {\n        // Set timeout to 0 if minDuration == 0 because a supporter could then\n        // trivially reset their lock timeout by staking and then immediately\n        // unstaking anyways.\n        if (minDuration == 0) {\n            return 0;\n        }\n        return lockTimeouts[supporter];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}