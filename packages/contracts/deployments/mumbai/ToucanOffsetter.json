{
  "address": "0x521cDdA5Ef7659A04721dB96Ccce6FA84cb0925E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toucanOffsettHelper",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "offsetToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "Offset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "YGPoolSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OFFSET_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offsetHelper",
      "outputs": [
        {
          "internalType": "contract IToucanOffsetHelper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "offsetToken",
          "type": "address"
        }
      ],
      "name": "offsetYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract ITokenPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "setYGPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x186d177e9c24501a9c71843ea29aad83ac47fc24de2ef6a02dfa3f38d5216c70",
  "receipt": {
    "to": null,
    "from": "0x692E08475F5363eBF842b66e70a82a758A68E980",
    "contractAddress": "0x521cDdA5Ef7659A04721dB96Ccce6FA84cb0925E",
    "transactionIndex": 23,
    "gasUsed": "1839532",
    "logsBloom": "0x
    "blockHash": "0xe12f478959cd35a6423577a96eb29e144c9468379c85b78e3aa7114d3b7c3771",
    "transactionHash": "0x186d177e9c24501a9c71843ea29aad83ac47fc24de2ef6a02dfa3f38d5216c70",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 29418636,
        "transactionHash": "0x186d177e9c24501a9c71843ea29aad83ac47fc24de2ef6a02dfa3f38d5216c70",
        "address": "0x521cDdA5Ef7659A04721dB96Ccce6FA84cb0925E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000692e08475f5363ebf842b66e70a82a758a68e980",
          "0x000000000000000000000000692e08475f5363ebf842b66e70a82a758a68e980"
        ],
        "data": "0x",
        "logIndex": 132,
        "blockHash": "0xe12f478959cd35a6423577a96eb29e144c9468379c85b78e3aa7114d3b7c3771"
      },
      {
        "transactionIndex": 23,
        "blockNumber": 29418636,
        "transactionHash": "0x186d177e9c24501a9c71843ea29aad83ac47fc24de2ef6a02dfa3f38d5216c70",
        "address": "0x521cDdA5Ef7659A04721dB96Ccce6FA84cb0925E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x660947821d2a889cb9f8c66687544fd288e28eef07bd2c94605dd70cb9a44528",
          "0x000000000000000000000000692e08475f5363ebf842b66e70a82a758a68e980",
          "0x000000000000000000000000692e08475f5363ebf842b66e70a82a758a68e980"
        ],
        "data": "0x",
        "logIndex": 133,
        "blockHash": "0xe12f478959cd35a6423577a96eb29e144c9468379c85b78e3aa7114d3b7c3771"
      },
      {
        "transactionIndex": 23,
        "blockNumber": 29418636,
        "transactionHash": "0x186d177e9c24501a9c71843ea29aad83ac47fc24de2ef6a02dfa3f38d5216c70",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000692e08475f5363ebf842b66e70a82a758a68e980",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000009cd8c6fa2239800000000000000000000000000000000000000000000000027e0e2f41121578d0000000000000000000000000000000000000000000017f1ba70fb413dd5a4f100000000000000000000000000000000000000000000000027d71567a17f33f50000000000000000000000000000000000000000000017f1ba7ac8cdad77c889",
        "logIndex": 134,
        "blockHash": "0xe12f478959cd35a6423577a96eb29e144c9468379c85b78e3aa7114d3b7c3771"
      }
    ],
    "blockNumber": 29418636,
    "cumulativeGasUsed": "7250608",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDC54484c13d9956199cc14A49d07D58be4794D2A"
  ],
  "numDeployments": 1,
  "solcInputHash": "13dd26f8daf12d363c04a6203e43909d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toucanOffsettHelper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offsetToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"Offset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"YGPoolSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFFSET_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offsetHelper\",\"outputs\":[{\"internalType\":\"contract IToucanOffsetHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offsetToken\",\"type\":\"address\"}],\"name\":\"offsetYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract ITokenPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setYGPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Sebastian Stammler\",\"details\":\"The beneficiary is set at deployment of a TokenPool. For that reason, the ToucanOffsetter has to be deployed first, then the TokenPool with the just deployed ToucanOffsetter as beneficiary and then finally the TokenPool has to be set using setYGPool. The alternative constructors of ToucanOffsetterPoolDeployment or ToucanOffsetterPoolDeploymentApproval can be used to automate this process within a single deployment transaction.\",\"events\":{\"Offset(address,uint256,address,uint256)\":{\"details\":\"The last parameter offset only contains the sum of all offset TCO2s. If individual TCO2s and amounts are of interest to the application, read the Redeemed event emitted by the Toucan OffsetHelper.\",\"params\":{\"offset\":\"Total sum of TCO2s that got offset.\",\"offsetToken\":\"Toucan offset token that got redeemed.\",\"token\":\"Address of input token that got swapped into Toucan offset token.\",\"yield\":\"Amount of yield that got swapped.\"}},\"YGPoolSet(address)\":{\"params\":{\"pool\":\"Address of Yieldgate pool.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"TokenPool has to be deployed afterwards, setting this ToucanOffsetter as beneficiary. Then setYGPool has to be called with the TokenPool's address. ToucanOffsetterPoolDeployment can be used instead to bundle this behavior. The deployer is set as admin and also granted the offsetter role.\",\"params\":{\"_toucanOffsettHelper\":\"Address of Toucan OffsetHelper.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"offsetYield(address,address)\":{\"details\":\"Emits an Offset event. Caller must have OFFSET_ROLE.\",\"params\":{\"offsetToken\":\"Toucan offset token to use for offsetting (BCT, NCT, ...).\",\"token\":\"Token to claim yield for from the TokenPool.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setYGPool(address)\":{\"details\":\"Can only be set by the admin.\",\"params\":{\"_pool\":\"TokenPool address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"Yieldgate Toucan Offsetter\",\"version\":1},\"userdoc\":{\"events\":{\"Offset(address,uint256,address,uint256)\":{\"notice\":\"Offset is emitted when yield has been claimed from the TokenPool and used for offsetting via Toucan offset tokens.\"},\"YGPoolSet(address)\":{\"notice\":\"YGPoolSet is emitted when the yieldgate pool is (re)set.\"}},\"kind\":\"user\",\"methods\":{\"OFFSET_ROLE()\":{\"notice\":\"Offsetters are allowed to call offsetYield. Only this contract's   admin can grant this role to new addresses.\"},\"constructor\":{\"notice\":\"Deploys the ToucanOffsetter with given Toucan OffsetHelper.\"},\"offsetHelper()\":{\"notice\":\"Toucan OffsetHelper contract that is used for offsetting claimed yield.\"},\"offsetYield(address,address)\":{\"notice\":\"offsetYield claims all accrued yield from the TokenPool and then uses the OffsetHelper to swap and retire the yield into Toucan offset token.\"},\"pool()\":{\"notice\":\"TokenPool from which yield is claimed.\"},\"setYGPool(address)\":{\"notice\":\"Sets the Yieldgate TokenPool.\"}},\"notice\":\"The Toucan Offsetter contract is designed to be the beneficiary of a Yieldgate TokenPool, forwarding all generated yield to Toucan for carbon offsetting.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ToucanOffsetter.sol\":\"ToucanOffsetter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/TokenPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ITokenPool} from \\\"./interfaces/ITokenPool.sol\\\";\\nimport {IAavePool, IAavePoolAddressesProvider} from \\\"./deps/Aave.sol\\\";\\n\\n/**\\n * @title Yieldgate Token Pool\\n * @author Sebastian Stammler\\n * @notice Users can stake any token on the TokenPool while a designated\\n * beneficiary can claim any generated yield. Users can unstake their previously\\n * staked tokens at any time. Aave is used as a yield generator.\\n * @dev Prior to staking a new token, the AavePool has to be approved as a\\n * spender of this contract's token once by calling approvePool with the token\\n * address. The alternative constructor contract TokenPoolWithApproval can be\\n * used to deploy this contract and approve a list of tokens at the same time.\\n */\\ncontract TokenPool is ITokenPool {\\n    /*\\n     * @notice Provider of AAVE protocol contract instance addresses. This\\n     *   address is fixed for a particular market.\\n     * @dev Since the actual AAVE Pool address is subject to change, AAVE\\n     *   advices to always read the pool address from the PoolAddressesProvider.\\n     */\\n    IAavePoolAddressesProvider public immutable aavePoolAddressesProvider;\\n\\n    /*\\n     * @notice address of beneficiary that can claim generated yield.\\n     */\\n    address public immutable beneficiary;\\n\\n    /*\\n     * @notice Amount staked by token and by user.\\n     * @dev Mapping format is token address -> user -> amount.\\n     */\\n    mapping(address => mapping(address => uint256)) public stakes;\\n\\n    // Total stake, by token address.\\n    mapping(address => uint256) internal totalStake;\\n\\n    modifier onlyBeneficiary() {\\n        require(msg.sender == beneficiary, \\\"only beneficiary\\\");\\n        _;\\n    }\\n\\n    constructor(address _aavePoolAddressesProvider, address _beneficiary) {\\n        aavePoolAddressesProvider = IAavePoolAddressesProvider(_aavePoolAddressesProvider);\\n        beneficiary = _beneficiary;\\n    }\\n\\n    /*\\n     * @notice Approves the Aave Pool to spend the given token on behalf of this\\n     * token pool. Trusting the Aave pool implementation, the maximum allowance\\n     * is set to save on repeated approve calls.\\n     * @dev Has to be called once before staking a new token, by any user.\\n     * A new call would be necessary in the unlikely event that the Aave pool\\n     * proxy address, returned by the PoolAddressesProvider, changes.\\n     */\\n    function approvePool(address token) public {\\n        require(\\n            IERC20(token).approve(address(aavePool()), type(uint256).max),\\n            \\\"AavePool approval failed\\\"\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc ITokenPool\\n     * @dev Prio to calling stake, a respective allowance for the token pool has\\n     * to be set.\\n     * When staking a token for the first time, the (infinite) ERC20 allowance\\n     * for the Aave Pool has to be approved first by calling function\\n     * approvePool (with any user). stake emits a Staked event on success.\\n     */\\n    function stake(\\n        address token,\\n        address supporter,\\n        uint256 amount\\n    ) public virtual {\\n        require(amount > 0, \\\"zero amount\\\");\\n\\n        stakes[token][supporter] += amount;\\n        totalStake[token] += amount;\\n\\n        require(\\n            IERC20(token).transferFrom(msg.sender, address(this), amount),\\n            \\\"token transfer failed\\\"\\n        );\\n        // For the next step to succeed, approvePool must have been called once before.\\n        aavePool().supply(token, amount, address(this), 0);\\n\\n        emit Staked(token, supporter, amount);\\n    }\\n\\n    /// @inheritdoc ITokenPool\\n    function unstake(address token) public virtual returns (uint256) {\\n        address supporter = msg.sender;\\n        uint256 amount = stakes[token][supporter];\\n        require(amount > 0, \\\"no supporter\\\");\\n\\n        stakes[token][supporter] = 0;\\n        totalStake[token] -= amount;\\n\\n        withdraw(token, amount, supporter);\\n\\n        emit Unstaked(token, supporter, amount);\\n        return amount;\\n    }\\n\\n    /**\\n     * @inheritdoc ITokenPool\\n     * @dev Emits a Claimed event on success. Only callable by the beneficiary.\\n     */\\n    function claim(address token) public virtual onlyBeneficiary returns (uint256) {\\n        uint256 amount = claimable(token);\\n        withdraw(token, amount, beneficiary);\\n\\n        emit Claimed(token, amount);\\n        return amount;\\n    }\\n\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        address receiver\\n    ) internal {\\n        aavePool().withdraw(token, amount, receiver);\\n    }\\n\\n    /// @inheritdoc ITokenPool\\n    function claimable(address token) public view returns (uint256) {\\n        IERC20 aToken = IERC20(aavePool().getReserveData(token).aTokenAddress);\\n        return aToken.balanceOf(address(this)) - staked(token);\\n    }\\n\\n    /// @inheritdoc ITokenPool\\n    function staked(address token) public view returns (uint256) {\\n        return totalStake[token];\\n    }\\n\\n    function aavePool() internal view returns (IAavePool) {\\n        return IAavePool(aavePoolAddressesProvider.getPool());\\n    }\\n}\\n\\n/**\\n * @dev The TokenPoolWithApproval is the same contract as the\\n * TokenPool while its constructor also approves the aavePool to spend the\\n * provided list of tokens on behalf of this TokenPool.\\n */\\ncontract TokenPoolWithApproval is TokenPool {\\n    constructor(\\n        address _aavePoolAddressesProvider,\\n        address _beneficiary,\\n        address[] memory _approvedTokens\\n    ) TokenPool(_aavePoolAddressesProvider, _beneficiary) {\\n        for (uint256 i = 0; i < _approvedTokens.length; i++) approvePool(_approvedTokens[i]);\\n    }\\n}\\n\",\"keccak256\":\"0xebad7ff0b0cb903866e80cd5f864152754a13b2b2cca51a15e2cc170dd341461\",\"license\":\"MIT\"},\"contracts/ToucanOffsetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./deps/Toucan.sol\\\";\\n\\nimport \\\"./TokenPool.sol\\\";\\nimport \\\"./interfaces/ITokenPool.sol\\\";\\n\\n/**\\n * @title Yieldgate Toucan Offsetter\\n * @author Sebastian Stammler\\n * @notice The Toucan Offsetter contract is designed to be the beneficiary of a\\n * Yieldgate TokenPool, forwarding all generated yield to Toucan for carbon\\n * offsetting.\\n * @dev The beneficiary is set at deployment of a TokenPool. For that reason,\\n * the ToucanOffsetter has to be deployed first, then the TokenPool with the\\n * just deployed ToucanOffsetter as beneficiary and then finally the TokenPool\\n * has to be set using setYGPool.\\n * The alternative constructors of ToucanOffsetterPoolDeployment or\\n * ToucanOffsetterPoolDeploymentApproval can be used to automate this process\\n * within a single deployment transaction.\\n */\\ncontract ToucanOffsetter is AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Offsetters are allowed to call offsetYield. Only this contract's\\n     *   admin can grant this role to new addresses.\\n     */\\n    bytes32 public constant OFFSET_ROLE = keccak256(\\\"OFFSET_ROLE\\\");\\n\\n    /// @notice TokenPool from which yield is claimed.\\n    ITokenPool public pool;\\n\\n    /// @notice Toucan OffsetHelper contract that is used for offsetting claimed yield.\\n    IToucanOffsetHelper public offsetHelper;\\n\\n    /**\\n     * @notice YGPoolSet is emitted when the yieldgate pool is (re)set.\\n     * @param pool Address of Yieldgate pool.\\n     */\\n    event YGPoolSet(address indexed pool);\\n\\n    /**\\n     * @notice Offset is emitted when yield has been claimed from the\\n     * TokenPool and used for offsetting via Toucan offset tokens.\\n     * @dev The last parameter offset only contains the sum of all offset TCO2s.\\n     * If individual TCO2s and amounts are of interest to the application, read\\n     * the Redeemed event emitted by the Toucan OffsetHelper.\\n     * @param token Address of input token that got swapped into Toucan offset token.\\n     * @param yield Amount of yield that got swapped.\\n     * @param offsetToken Toucan offset token that got redeemed.\\n     * @param offset Total sum of TCO2s that got offset.\\n     */\\n    event Offset(address indexed token, uint256 yield, address indexed offsetToken, uint256 offset);\\n\\n    modifier onlyAdmin() {\\n        _checkRole(DEFAULT_ADMIN_ROLE);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Deploys the ToucanOffsetter with given Toucan OffsetHelper.\\n     * @dev TokenPool has to be deployed afterwards, setting this\\n     * ToucanOffsetter as beneficiary. Then setYGPool has to be called with the\\n     * TokenPool's address. ToucanOffsetterPoolDeployment can be used instead to\\n     * bundle this behavior.\\n     * The deployer is set as admin and also granted the offsetter role.\\n     * @param _toucanOffsettHelper Address of Toucan OffsetHelper.\\n     */\\n    constructor(address _toucanOffsettHelper) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(OFFSET_ROLE, msg.sender);\\n\\n        offsetHelper = IToucanOffsetHelper(_toucanOffsettHelper);\\n    }\\n\\n    /**\\n     * @notice Sets the Yieldgate TokenPool.\\n     * @dev Can only be set by the admin.\\n     * @param _pool TokenPool address.\\n     */\\n    function setYGPool(address _pool) external onlyAdmin {\\n        _setYGPool(_pool);\\n    }\\n\\n    function _setYGPool(address _pool) internal {\\n        pool = ITokenPool(_pool);\\n        emit YGPoolSet(_pool);\\n    }\\n\\n    /**\\n     * @notice offsetYield claims all accrued yield from the TokenPool and then\\n     * uses the OffsetHelper to swap and retire the yield into Toucan offset\\n     * token.\\n     * @dev Emits an Offset event. Caller must have OFFSET_ROLE.\\n     * @param token Token to claim yield for from the TokenPool.\\n     * @param offsetToken Toucan offset token to use for offsetting (BCT, NCT, ...).\\n     */\\n    function offsetYield(address token, address offsetToken)\\n        external\\n        virtual\\n        onlyRole(OFFSET_ROLE)\\n    {\\n        uint256 yield = pool.claim(token);\\n        IERC20(token).safeApprove(address(offsetHelper), yield);\\n        (, uint256[] memory amounts) = offsetHelper.autoOffsetExactInToken(\\n            token,\\n            yield,\\n            offsetToken\\n        );\\n\\n        uint256 offset;\\n        for (uint256 i = 0; i < amounts.length; i++) offset += amounts[i];\\n        emit Offset(token, yield, offsetToken, offset);\\n    }\\n}\\n\\n/**\\n * @dev The ToucanOffsetterPoolDeployment is the same contract as the\\n * ToucanOffsetter while its constructor also deploys its own TokenPool, setting\\n * it as its pool during deployment.\\n */\\ncontract ToucanOffsetterWithPoolDeployment is ToucanOffsetter {\\n    constructor(address _toucanOffsettHelper, address _aavePoolAddressesProvider)\\n        ToucanOffsetter(_toucanOffsettHelper)\\n    {\\n        // deploy own pool\\n        pool = new TokenPool(_aavePoolAddressesProvider, address(this));\\n        _setYGPool(address(pool));\\n    }\\n}\\n\\n/**\\n * @dev The ToucanOffsetterPoolDeploymentApproval is the same contract as the\\n * ToucanOffsetter while its constructor also deploys its own TokenPool, setting\\n * it as its pool during deployment and approves the Aave pool to transfer the\\n * provided list of tokens on behalf of the TokenPool.\\n */\\ncontract ToucanOffsetterWithPoolDeploymentApproval is ToucanOffsetter {\\n    constructor(\\n        address _toucanOffsettHelper,\\n        address _aavePoolAddressesProvider,\\n        address[] memory _approvedTokens\\n    ) ToucanOffsetter(_toucanOffsettHelper) {\\n        // deploy own pool\\n        pool = new TokenPoolWithApproval(\\n            _aavePoolAddressesProvider,\\n            address(this),\\n            _approvedTokens\\n        );\\n        _setYGPool(address(pool));\\n    }\\n}\\n\",\"keccak256\":\"0xca509e107558d62b1577e1279e836b912f7b51fc778173db072f9b409283c9bf\",\"license\":\"MIT\"},\"contracts/deps/Aave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IWETHGateway {\\n    function depositETH(\\n        address pool,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external payable;\\n\\n    function withdrawETH(\\n        address pool,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) external;\\n}\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n * https://github.com/aave/aave-v3-core/blob/master/contracts/interfaces/IPoolAddressesProvider.sol\\n **/\\ninterface IAavePoolAddressesProvider {\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n     * @return The Pool proxy address\\n     **/\\n    function getPool() external view returns (address);\\n}\\n\\n// https://github.com/aave/aave-v3-core/blob/master/contracts/interfaces/IPool.sol\\ninterface IAavePool {\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state and configuration data of the reserve\\n     **/\\n    function getReserveData(address asset) external view returns (AaveDataTypes.ReserveData memory);\\n}\\n\\n// https://github.com/aave/aave-v3-core/blob/master/contracts/protocol/libraries/types/DataTypes.sol\\nlibrary AaveDataTypes {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        //timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint16 id;\\n        //aToken address\\n        address aTokenAddress;\\n        //stableDebtToken address\\n        address stableDebtTokenAddress;\\n        //variableDebtToken address\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n        //the outstanding unbacked aTokens minted through the bridging feature\\n        uint128 unbacked;\\n        //the outstanding debt borrowed against this asset in isolation mode\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62-63: reserved\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n\\n        uint256 data;\\n    }\\n}\\n\",\"keccak256\":\"0x80461eb1d77b7671c5523ee799b7e39757033be922e76fb78ba814968a8f83d6\",\"license\":\"MIT\"},\"contracts/deps/Toucan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IToucanOffsetHelper {\\n    /**\\n     * @notice Emitted upon successful redemption of TCO2 tokens from a Toucan\\n     * pool token such as BCT or NCT.\\n     *\\n     * @param who The sender of the transaction\\n     * @param poolToken The address of the Toucan pool token used in the\\n     * redemption, for example, NCT or BCT\\n     * @param tco2s An array of the TCO2 addresses that were redeemed\\n     * @param amounts An array of the amounts of each TCO2 that were redeemed\\n     */\\n    event Redeemed(address who, address poolToken, address[] tco2s, uint256[] amounts);\\n\\n    /**\\n     * @notice Retire carbon credits using the lowest quality (oldest) TCO2\\n     * tokens available from the specified Toucan token pool by sending ERC20\\n     * tokens (USDC, WETH, WMATIC). All provided token is consumed for\\n     * offsetting.\\n     *\\n     * This function:\\n     * 1. Swaps the ERC20 token sent to the contract for the specified pool token.\\n     * 2. Redeems the pool token for the poorest quality TCO2 tokens available.\\n     * 3. Retires the TCO2 tokens.\\n     *\\n     * Note: The client must approve the ERC20 token that is sent to the contract.\\n     *\\n     * @dev When automatically redeeming pool tokens for the lowest quality\\n     * TCO2s there are no fees and you receive exactly 1 TCO2 token for 1 pool\\n     * token.\\n     *\\n     * @param _fromToken The address of the ERC20 token that the user sends\\n     * (must be one of USDC, WETH, WMATIC)\\n     * @param _amountToSwap The amount of ERC20 token to swap into Toucan pool\\n     * token. Full amount will be used for offsetting.\\n     * @param _poolToken The address of the Toucan pool token that the\\n     * user wants to use, for example, NCT or BCT\\n     *\\n     * @return tco2s An array of the TCO2 addresses that were redeemed\\n     * @return amounts An array of the amounts of each TCO2 that were redeemed\\n     */\\n    function autoOffsetExactInToken(\\n        address _fromToken,\\n        uint256 _amountToSwap,\\n        address _poolToken\\n    ) external returns (address[] memory tco2s, uint256[] memory amounts);\\n\\n    /**\\n     * @notice Calculates the expected amount of Toucan Pool token that can be\\n     * acquired by swapping the provided amount of ERC20 token.\\n     *\\n     * @param _fromToken The address of the ERC20 token used for the swap\\n     * @param _fromAmount The amount of ERC20 token to swap\\n     * @param _toToken The address of the pool token to swap for,\\n     * for example, NCT or BCT\\n     * @return The expected amount of Pool token that can be acquired\\n     */\\n    function calculateExpectedPoolTokenForToken(\\n        address _fromToken,\\n        uint256 _fromAmount,\\n        address _toToken\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcbb2d6ba771731757b3aacf32f0e8c458556fd2ad66cebc783f09fa8f59bd2f7\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Yieldgate Token Pool Interface\\n * @author Sebastian Stammler <seb@yieldgate.xyz>\\n */\\ninterface ITokenPool {\\n    /**\\n     * @notice Staked is emitted on every successful stake.\\n     * @param token Address of staked ERC20 token.\\n     * @param supporter Addrses of staker.\\n     * @param amount Amount that got staked.\\n     */\\n    event Staked(address indexed token, address indexed supporter, uint256 amount);\\n\\n    /**\\n     * @notice Unstaked is cool\\n     * @param token Address of unstaked ERC20 token.\\n     * @param supporter Addrses of unstaker.\\n     * @param amount Amount that got unstaked.\\n     */\\n    event Unstaked(address indexed token, address indexed supporter, uint256 amount);\\n\\n    /**\\n     * @notice Claimed is emitted on every successful claim.\\n     * @param token Address of claimed ERC20 token.\\n     * @param amount Amount that got claimed.\\n     */\\n    event Claimed(address indexed token, uint256 amount);\\n\\n    /**\\n     * @notice Returns the beneficiary of this pool.\\n     * @dev Usually this is implemented as a public (immutable) address storage\\n     * variable.\\n     */\\n    function beneficiary() external view returns (address);\\n\\n    /**\\n     * @notice Stakes given amount of token on behalf of the provided supporter.\\n     * @dev Prio to calling stake, a respective allowance for the token pool has\\n     *   to be set. On success, the implementation must emit a Staked event.\\n     * @param token Address of ERC20 token to stake.\\n     * @param supporter The supporter on whose behalf the token is staked.\\n     * @param amount The amount of token to stake.\\n     */\\n    function stake(\\n        address token,\\n        address supporter,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Unstakes all previously staked token by the calling supporter.\\n     *   The beneficiary keeps all generated yield.\\n     * @dev On success, the implementation must emit an Unstaked event.\\n     * @param token Address of ERC20 token to unstake.\\n     * @return Returns the unstaked amount.\\n     */\\n    function unstake(address token) external returns (uint256);\\n\\n    /**\\n     * @notice Sends the accrued yield to the beneficiary of this pool.\\n     * @dev The implementation should enforce some access control to this\\n     *   function, e.g., only let it be callable by the beneficiary. It must\\n     *   emit a Claimed event on success.\\n     * @param token Address of ERC20 token to claim.\\n     * @return Returns the claimed amount of yield.\\n     */\\n    function claim(address token) external returns (uint256);\\n\\n    /**\\n     * @notice Queries the claimable yield for the given ERC20 token.\\n     * @param token Address of ERC20 token to query.\\n     * @return Returns the claimable yield.\\n     */\\n    function claimable(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Queries the total staked amount for the given ERC20 token.\\n     * @param token Address of ERC20 token to query.\\n     * @return Returns the total staked amount.\\n     */\\n    function staked(address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x466bc0649f89973c9d96d3027ae1ea5d590a3351d3a6f9a6c96786f9c876040e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620021c7380380620021c7833981810160405281019062000037919062000293565b6200004c6000801b33620000c660201b60201c565b6200007e7f660947821d2a889cb9f8c66687544fd288e28eef07bd2c94605dd70cb9a4452833620000c660201b60201c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620002c5565b620000d88282620001b760201b60201c565b620001b357600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001586200022160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200025b826200022e565b9050919050565b6200026d816200024e565b81146200027957600080fd5b50565b6000815190506200028d8162000262565b92915050565b600060208284031215620002ac57620002ab62000229565b5b6000620002bc848285016200027c565b91505092915050565b611ef280620002d56000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806358d83d471161007157806358d83d471461018b57806391d14854146101a75780639bf35011146101d7578063a1177a21146101f5578063a217fddf14610213578063d547741f14610231576100b4565b806301ffc9a7146100b957806316f0115b146100e9578063248a9ca3146101075780632f2ff15d1461013757806336568abe146101535780633ea048821461016f575b600080fd5b6100d360048036038101906100ce9190611104565b61024d565b6040516100e0919061114c565b60405180910390f35b6100f16102c7565b6040516100fe91906111e6565b60405180910390f35b610121600480360381019061011c9190611237565b6102ed565b60405161012e9190611273565b60405180910390f35b610151600480360381019061014c91906112cc565b61030c565b005b61016d600480360381019061016891906112cc565b61032d565b005b6101896004803603810190610184919061130c565b6103b0565b005b6101a560048036038101906101a0919061134c565b610631565b005b6101c160048036038101906101bc91906112cc565b610649565b6040516101ce919061114c565b60405180910390f35b6101df6106b3565b6040516101ec9190611273565b60405180910390f35b6101fd6106d7565b60405161020a919061139a565b60405180910390f35b61021b6106fd565b6040516102289190611273565b60405180910390f35b61024b600480360381019061024691906112cc565b610704565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102c057506102bf82610725565b5b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000838152602001908152602001600020600101549050919050565b610315826102ed565b61031e8161078f565b61032883836107a3565b505050565b610335610883565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146103a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039990611438565b60405180910390fd5b6103ac828261088b565b5050565b7f660947821d2a889cb9f8c66687544fd288e28eef07bd2c94605dd70cb9a445286103da8161078f565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e83409a856040518263ffffffff1660e01b81526004016104379190611467565b6020604051808303816000875af1158015610456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047a91906114b8565b90506104c9600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828673ffffffffffffffffffffffffffffffffffffffff1661096c9092919063ffffffff16565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663226ee4ef8684876040518463ffffffff1660e01b815260040161052a939291906114f4565b6000604051808303816000875af1158015610549573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610572919061175c565b915050600080600090505b82518110156105c157828181518110610599576105986117d4565b5b6020026020010151826105ac9190611832565b915080806105b990611888565b91505061057d565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fe1475176e5614054770e151b6c05cf3e4136103268af5a0888f70339bff1408685846040516106219291906118d1565b60405180910390a3505050505050565b61063d6000801b61078f565b61064681610abb565b50565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f660947821d2a889cb9f8c66687544fd288e28eef07bd2c94605dd70cb9a4452881565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b81565b61070d826102ed565b6107168161078f565b610720838361088b565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6107a08161079b610883565b610b42565b50565b6107ad8282610649565b61087f57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610824610883565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6108958282610649565b1561096857600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061090d610883565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008114806109f6575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016109b39291906118fa565b602060405180830381865afa1580156109d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f491906114b8565b145b610a35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2c90611995565b60405180910390fd5b610ab68363095ea7b360e01b8484604051602401610a549291906119b5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610bdf565b505050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fc7235dcf43dbd54eb21709340c56c565a81a20f8e0cf4bed52e612fdab9d3bc960405160405180910390a250565b610b4c8282610649565b610bdb57610b718173ffffffffffffffffffffffffffffffffffffffff166014610ca6565b610b7f8360001c6020610ca6565b604051602001610b90929190611af0565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd29190611b63565b60405180910390fd5b5050565b6000610c41826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610ee29092919063ffffffff16565b9050600081511115610ca15780806020019051810190610c619190611bb1565b610ca0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9790611c50565b60405180910390fd5b5b505050565b606060006002836002610cb99190611c70565b610cc39190611832565b67ffffffffffffffff811115610cdc57610cdb611541565b5b6040519080825280601f01601f191660200182016040528015610d0e5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610d4657610d456117d4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610daa57610da96117d4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610dea9190611c70565b610df49190611832565b90505b6001811115610e94577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610e3657610e356117d4565b5b1a60f81b828281518110610e4d57610e4c6117d4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610e8d90611cca565b9050610df7565b5060008414610ed8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecf90611d40565b60405180910390fd5b8091505092915050565b6060610ef18484600085610efa565b90509392505050565b606082471015610f3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3690611dd2565b60405180910390fd5b610f488561100e565b610f87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7e90611e3e565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610fb09190611ea5565b60006040518083038185875af1925050503d8060008114610fed576040519150601f19603f3d011682016040523d82523d6000602084013e610ff2565b606091505b5091509150611002828286611031565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561104157829050611091565b6000835111156110545782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110889190611b63565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6110e1816110ac565b81146110ec57600080fd5b50565b6000813590506110fe816110d8565b92915050565b60006020828403121561111a576111196110a2565b5b6000611128848285016110ef565b91505092915050565b60008115159050919050565b61114681611131565b82525050565b6000602082019050611161600083018461113d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006111ac6111a76111a284611167565b611187565b611167565b9050919050565b60006111be82611191565b9050919050565b60006111d0826111b3565b9050919050565b6111e0816111c5565b82525050565b60006020820190506111fb60008301846111d7565b92915050565b6000819050919050565b61121481611201565b811461121f57600080fd5b50565b6000813590506112318161120b565b92915050565b60006020828403121561124d5761124c6110a2565b5b600061125b84828501611222565b91505092915050565b61126d81611201565b82525050565b60006020820190506112886000830184611264565b92915050565b600061129982611167565b9050919050565b6112a98161128e565b81146112b457600080fd5b50565b6000813590506112c6816112a0565b92915050565b600080604083850312156112e3576112e26110a2565b5b60006112f185828601611222565b9250506020611302858286016112b7565b9150509250929050565b60008060408385031215611323576113226110a2565b5b6000611331858286016112b7565b9250506020611342858286016112b7565b9150509250929050565b600060208284031215611362576113616110a2565b5b6000611370848285016112b7565b91505092915050565b6000611384826111b3565b9050919050565b61139481611379565b82525050565b60006020820190506113af600083018461138b565b92915050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000611422602f836113b5565b915061142d826113c6565b604082019050919050565b6000602082019050818103600083015261145181611415565b9050919050565b6114618161128e565b82525050565b600060208201905061147c6000830184611458565b92915050565b6000819050919050565b61149581611482565b81146114a057600080fd5b50565b6000815190506114b28161148c565b92915050565b6000602082840312156114ce576114cd6110a2565b5b60006114dc848285016114a3565b91505092915050565b6114ee81611482565b82525050565b60006060820190506115096000830186611458565b61151660208301856114e5565b6115236040830184611458565b949350505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61157982611530565b810181811067ffffffffffffffff8211171561159857611597611541565b5b80604052505050565b60006115ab611098565b90506115b78282611570565b919050565b600067ffffffffffffffff8211156115d7576115d6611541565b5b602082029050602081019050919050565b600080fd5b6000815190506115fc816112a0565b92915050565b6000611615611610846115bc565b6115a1565b90508083825260208201905060208402830185811115611638576116376115e8565b5b835b81811015611661578061164d88826115ed565b84526020840193505060208101905061163a565b5050509392505050565b600082601f8301126116805761167f61152b565b5b8151611690848260208601611602565b91505092915050565b600067ffffffffffffffff8211156116b4576116b3611541565b5b602082029050602081019050919050565b60006116d86116d384611699565b6115a1565b905080838252602082019050602084028301858111156116fb576116fa6115e8565b5b835b81811015611724578061171088826114a3565b8452602084019350506020810190506116fd565b5050509392505050565b600082601f8301126117435761174261152b565b5b81516117538482602086016116c5565b91505092915050565b60008060408385031215611773576117726110a2565b5b600083015167ffffffffffffffff811115611791576117906110a7565b5b61179d8582860161166b565b925050602083015167ffffffffffffffff8111156117be576117bd6110a7565b5b6117ca8582860161172e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061183d82611482565b915061184883611482565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561187d5761187c611803565b5b828201905092915050565b600061189382611482565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156118c6576118c5611803565b5b600182019050919050565b60006040820190506118e660008301856114e5565b6118f360208301846114e5565b9392505050565b600060408201905061190f6000830185611458565b61191c6020830184611458565b9392505050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b600061197f6036836113b5565b915061198a82611923565b604082019050919050565b600060208201905081810360008301526119ae81611972565b9050919050565b60006040820190506119ca6000830185611458565b6119d760208301846114e5565b9392505050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000611a1f6017836119de565b9150611a2a826119e9565b601782019050919050565b600081519050919050565b60005b83811015611a5e578082015181840152602081019050611a43565b83811115611a6d576000848401525b50505050565b6000611a7e82611a35565b611a8881856119de565b9350611a98818560208601611a40565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000611ada6011836119de565b9150611ae582611aa4565b601182019050919050565b6000611afb82611a12565b9150611b078285611a73565b9150611b1282611acd565b9150611b1e8284611a73565b91508190509392505050565b6000611b3582611a35565b611b3f81856113b5565b9350611b4f818560208601611a40565b611b5881611530565b840191505092915050565b60006020820190508181036000830152611b7d8184611b2a565b905092915050565b611b8e81611131565b8114611b9957600080fd5b50565b600081519050611bab81611b85565b92915050565b600060208284031215611bc757611bc66110a2565b5b6000611bd584828501611b9c565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611c3a602a836113b5565b9150611c4582611bde565b604082019050919050565b60006020820190508181036000830152611c6981611c2d565b9050919050565b6000611c7b82611482565b9150611c8683611482565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611cbf57611cbe611803565b5b828202905092915050565b6000611cd582611482565b91506000821415611ce957611ce8611803565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000611d2a6020836113b5565b9150611d3582611cf4565b602082019050919050565b60006020820190508181036000830152611d5981611d1d565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611dbc6026836113b5565b9150611dc782611d60565b604082019050919050565b60006020820190508181036000830152611deb81611daf565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611e28601d836113b5565b9150611e3382611df2565b602082019050919050565b60006020820190508181036000830152611e5781611e1b565b9050919050565b600081519050919050565b600081905092915050565b6000611e7f82611e5e565b611e898185611e69565b9350611e99818560208601611a40565b80840191505092915050565b6000611eb18284611e74565b91508190509291505056fea2646970667358221220f40aa7e3d7fc78911c0662dca6f472f068a4c73f92d1db323581e0dac4ab107d64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806358d83d471161007157806358d83d471461018b57806391d14854146101a75780639bf35011146101d7578063a1177a21146101f5578063a217fddf14610213578063d547741f14610231576100b4565b806301ffc9a7146100b957806316f0115b146100e9578063248a9ca3146101075780632f2ff15d1461013757806336568abe146101535780633ea048821461016f575b600080fd5b6100d360048036038101906100ce9190611104565b61024d565b6040516100e0919061114c565b60405180910390f35b6100f16102c7565b6040516100fe91906111e6565b60405180910390f35b610121600480360381019061011c9190611237565b6102ed565b60405161012e9190611273565b60405180910390f35b610151600480360381019061014c91906112cc565b61030c565b005b61016d600480360381019061016891906112cc565b61032d565b005b6101896004803603810190610184919061130c565b6103b0565b005b6101a560048036038101906101a0919061134c565b610631565b005b6101c160048036038101906101bc91906112cc565b610649565b6040516101ce919061114c565b60405180910390f35b6101df6106b3565b6040516101ec9190611273565b60405180910390f35b6101fd6106d7565b60405161020a919061139a565b60405180910390f35b61021b6106fd565b6040516102289190611273565b60405180910390f35b61024b600480360381019061024691906112cc565b610704565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102c057506102bf82610725565b5b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000838152602001908152602001600020600101549050919050565b610315826102ed565b61031e8161078f565b61032883836107a3565b505050565b610335610883565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146103a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039990611438565b60405180910390fd5b6103ac828261088b565b5050565b7f660947821d2a889cb9f8c66687544fd288e28eef07bd2c94605dd70cb9a445286103da8161078f565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e83409a856040518263ffffffff1660e01b81526004016104379190611467565b6020604051808303816000875af1158015610456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047a91906114b8565b90506104c9600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828673ffffffffffffffffffffffffffffffffffffffff1661096c9092919063ffffffff16565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663226ee4ef8684876040518463ffffffff1660e01b815260040161052a939291906114f4565b6000604051808303816000875af1158015610549573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610572919061175c565b915050600080600090505b82518110156105c157828181518110610599576105986117d4565b5b6020026020010151826105ac9190611832565b915080806105b990611888565b91505061057d565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fe1475176e5614054770e151b6c05cf3e4136103268af5a0888f70339bff1408685846040516106219291906118d1565b60405180910390a3505050505050565b61063d6000801b61078f565b61064681610abb565b50565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f660947821d2a889cb9f8c66687544fd288e28eef07bd2c94605dd70cb9a4452881565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b81565b61070d826102ed565b6107168161078f565b610720838361088b565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6107a08161079b610883565b610b42565b50565b6107ad8282610649565b61087f57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610824610883565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6108958282610649565b1561096857600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061090d610883565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008114806109f6575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016109b39291906118fa565b602060405180830381865afa1580156109d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f491906114b8565b145b610a35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2c90611995565b60405180910390fd5b610ab68363095ea7b360e01b8484604051602401610a549291906119b5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610bdf565b505050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fc7235dcf43dbd54eb21709340c56c565a81a20f8e0cf4bed52e612fdab9d3bc960405160405180910390a250565b610b4c8282610649565b610bdb57610b718173ffffffffffffffffffffffffffffffffffffffff166014610ca6565b610b7f8360001c6020610ca6565b604051602001610b90929190611af0565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd29190611b63565b60405180910390fd5b5050565b6000610c41826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610ee29092919063ffffffff16565b9050600081511115610ca15780806020019051810190610c619190611bb1565b610ca0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9790611c50565b60405180910390fd5b5b505050565b606060006002836002610cb99190611c70565b610cc39190611832565b67ffffffffffffffff811115610cdc57610cdb611541565b5b6040519080825280601f01601f191660200182016040528015610d0e5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610d4657610d456117d4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610daa57610da96117d4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610dea9190611c70565b610df49190611832565b90505b6001811115610e94577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610e3657610e356117d4565b5b1a60f81b828281518110610e4d57610e4c6117d4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610e8d90611cca565b9050610df7565b5060008414610ed8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecf90611d40565b60405180910390fd5b8091505092915050565b6060610ef18484600085610efa565b90509392505050565b606082471015610f3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3690611dd2565b60405180910390fd5b610f488561100e565b610f87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7e90611e3e565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610fb09190611ea5565b60006040518083038185875af1925050503d8060008114610fed576040519150601f19603f3d011682016040523d82523d6000602084013e610ff2565b606091505b5091509150611002828286611031565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561104157829050611091565b6000835111156110545782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110889190611b63565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6110e1816110ac565b81146110ec57600080fd5b50565b6000813590506110fe816110d8565b92915050565b60006020828403121561111a576111196110a2565b5b6000611128848285016110ef565b91505092915050565b60008115159050919050565b61114681611131565b82525050565b6000602082019050611161600083018461113d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006111ac6111a76111a284611167565b611187565b611167565b9050919050565b60006111be82611191565b9050919050565b60006111d0826111b3565b9050919050565b6111e0816111c5565b82525050565b60006020820190506111fb60008301846111d7565b92915050565b6000819050919050565b61121481611201565b811461121f57600080fd5b50565b6000813590506112318161120b565b92915050565b60006020828403121561124d5761124c6110a2565b5b600061125b84828501611222565b91505092915050565b61126d81611201565b82525050565b60006020820190506112886000830184611264565b92915050565b600061129982611167565b9050919050565b6112a98161128e565b81146112b457600080fd5b50565b6000813590506112c6816112a0565b92915050565b600080604083850312156112e3576112e26110a2565b5b60006112f185828601611222565b9250506020611302858286016112b7565b9150509250929050565b60008060408385031215611323576113226110a2565b5b6000611331858286016112b7565b9250506020611342858286016112b7565b9150509250929050565b600060208284031215611362576113616110a2565b5b6000611370848285016112b7565b91505092915050565b6000611384826111b3565b9050919050565b61139481611379565b82525050565b60006020820190506113af600083018461138b565b92915050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000611422602f836113b5565b915061142d826113c6565b604082019050919050565b6000602082019050818103600083015261145181611415565b9050919050565b6114618161128e565b82525050565b600060208201905061147c6000830184611458565b92915050565b6000819050919050565b61149581611482565b81146114a057600080fd5b50565b6000815190506114b28161148c565b92915050565b6000602082840312156114ce576114cd6110a2565b5b60006114dc848285016114a3565b91505092915050565b6114ee81611482565b82525050565b60006060820190506115096000830186611458565b61151660208301856114e5565b6115236040830184611458565b949350505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61157982611530565b810181811067ffffffffffffffff8211171561159857611597611541565b5b80604052505050565b60006115ab611098565b90506115b78282611570565b919050565b600067ffffffffffffffff8211156115d7576115d6611541565b5b602082029050602081019050919050565b600080fd5b6000815190506115fc816112a0565b92915050565b6000611615611610846115bc565b6115a1565b90508083825260208201905060208402830185811115611638576116376115e8565b5b835b81811015611661578061164d88826115ed565b84526020840193505060208101905061163a565b5050509392505050565b600082601f8301126116805761167f61152b565b5b8151611690848260208601611602565b91505092915050565b600067ffffffffffffffff8211156116b4576116b3611541565b5b602082029050602081019050919050565b60006116d86116d384611699565b6115a1565b905080838252602082019050602084028301858111156116fb576116fa6115e8565b5b835b81811015611724578061171088826114a3565b8452602084019350506020810190506116fd565b5050509392505050565b600082601f8301126117435761174261152b565b5b81516117538482602086016116c5565b91505092915050565b60008060408385031215611773576117726110a2565b5b600083015167ffffffffffffffff811115611791576117906110a7565b5b61179d8582860161166b565b925050602083015167ffffffffffffffff8111156117be576117bd6110a7565b5b6117ca8582860161172e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061183d82611482565b915061184883611482565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561187d5761187c611803565b5b828201905092915050565b600061189382611482565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156118c6576118c5611803565b5b600182019050919050565b60006040820190506118e660008301856114e5565b6118f360208301846114e5565b9392505050565b600060408201905061190f6000830185611458565b61191c6020830184611458565b9392505050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b600061197f6036836113b5565b915061198a82611923565b604082019050919050565b600060208201905081810360008301526119ae81611972565b9050919050565b60006040820190506119ca6000830185611458565b6119d760208301846114e5565b9392505050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000611a1f6017836119de565b9150611a2a826119e9565b601782019050919050565b600081519050919050565b60005b83811015611a5e578082015181840152602081019050611a43565b83811115611a6d576000848401525b50505050565b6000611a7e82611a35565b611a8881856119de565b9350611a98818560208601611a40565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000611ada6011836119de565b9150611ae582611aa4565b601182019050919050565b6000611afb82611a12565b9150611b078285611a73565b9150611b1282611acd565b9150611b1e8284611a73565b91508190509392505050565b6000611b3582611a35565b611b3f81856113b5565b9350611b4f818560208601611a40565b611b5881611530565b840191505092915050565b60006020820190508181036000830152611b7d8184611b2a565b905092915050565b611b8e81611131565b8114611b9957600080fd5b50565b600081519050611bab81611b85565b92915050565b600060208284031215611bc757611bc66110a2565b5b6000611bd584828501611b9c565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611c3a602a836113b5565b9150611c4582611bde565b604082019050919050565b60006020820190508181036000830152611c6981611c2d565b9050919050565b6000611c7b82611482565b9150611c8683611482565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611cbf57611cbe611803565b5b828202905092915050565b6000611cd582611482565b91506000821415611ce957611ce8611803565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000611d2a6020836113b5565b9150611d3582611cf4565b602082019050919050565b60006020820190508181036000830152611d5981611d1d565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611dbc6026836113b5565b9150611dc782611d60565b604082019050919050565b60006020820190508181036000830152611deb81611daf565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611e28601d836113b5565b9150611e3382611df2565b602082019050919050565b60006020820190508181036000830152611e5781611e1b565b9050919050565b600081519050919050565b600081905092915050565b6000611e7f82611e5e565b611e898185611e69565b9350611e99818560208601611a40565b80840191505092915050565b6000611eb18284611e74565b91508190509291505056fea2646970667358221220f40aa7e3d7fc78911c0662dca6f472f068a4c73f92d1db323581e0dac4ab107d64736f6c634300080a0033",
  "devdoc": {
    "author": "Sebastian Stammler",
    "details": "The beneficiary is set at deployment of a TokenPool. For that reason, the ToucanOffsetter has to be deployed first, then the TokenPool with the just deployed ToucanOffsetter as beneficiary and then finally the TokenPool has to be set using setYGPool. The alternative constructors of ToucanOffsetterPoolDeployment or ToucanOffsetterPoolDeploymentApproval can be used to automate this process within a single deployment transaction.",
    "events": {
      "Offset(address,uint256,address,uint256)": {
        "details": "The last parameter offset only contains the sum of all offset TCO2s. If individual TCO2s and amounts are of interest to the application, read the Redeemed event emitted by the Toucan OffsetHelper.",
        "params": {
          "offset": "Total sum of TCO2s that got offset.",
          "offsetToken": "Toucan offset token that got redeemed.",
          "token": "Address of input token that got swapped into Toucan offset token.",
          "yield": "Amount of yield that got swapped."
        }
      },
      "YGPoolSet(address)": {
        "params": {
          "pool": "Address of Yieldgate pool."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "TokenPool has to be deployed afterwards, setting this ToucanOffsetter as beneficiary. Then setYGPool has to be called with the TokenPool's address. ToucanOffsetterPoolDeployment can be used instead to bundle this behavior. The deployer is set as admin and also granted the offsetter role.",
        "params": {
          "_toucanOffsettHelper": "Address of Toucan OffsetHelper."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "offsetYield(address,address)": {
        "details": "Emits an Offset event. Caller must have OFFSET_ROLE.",
        "params": {
          "offsetToken": "Toucan offset token to use for offsetting (BCT, NCT, ...).",
          "token": "Token to claim yield for from the TokenPool."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setYGPool(address)": {
        "details": "Can only be set by the admin.",
        "params": {
          "_pool": "TokenPool address."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "Yieldgate Toucan Offsetter",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Offset(address,uint256,address,uint256)": {
        "notice": "Offset is emitted when yield has been claimed from the TokenPool and used for offsetting via Toucan offset tokens."
      },
      "YGPoolSet(address)": {
        "notice": "YGPoolSet is emitted when the yieldgate pool is (re)set."
      }
    },
    "kind": "user",
    "methods": {
      "OFFSET_ROLE()": {
        "notice": "Offsetters are allowed to call offsetYield. Only this contract's   admin can grant this role to new addresses."
      },
      "constructor": {
        "notice": "Deploys the ToucanOffsetter with given Toucan OffsetHelper."
      },
      "offsetHelper()": {
        "notice": "Toucan OffsetHelper contract that is used for offsetting claimed yield."
      },
      "offsetYield(address,address)": {
        "notice": "offsetYield claims all accrued yield from the TokenPool and then uses the OffsetHelper to swap and retire the yield into Toucan offset token."
      },
      "pool()": {
        "notice": "TokenPool from which yield is claimed."
      },
      "setYGPool(address)": {
        "notice": "Sets the Yieldgate TokenPool."
      }
    },
    "notice": "The Toucan Offsetter contract is designed to be the beneficiary of a Yieldgate TokenPool, forwarding all generated yield to Toucan for carbon offsetting.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/ToucanOffsetter.sol:ToucanOffsetter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2544,
        "contract": "contracts/ToucanOffsetter.sol:ToucanOffsetter",
        "label": "pool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITokenPool)3645"
      },
      {
        "astId": 2548,
        "contract": "contracts/ToucanOffsetter.sol:ToucanOffsetter",
        "label": "offsetHelper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IToucanOffsetHelper)3568"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITokenPool)3645": {
        "encoding": "inplace",
        "label": "contract ITokenPool",
        "numberOfBytes": "20"
      },
      "t_contract(IToucanOffsetHelper)3568": {
        "encoding": "inplace",
        "label": "contract IToucanOffsetHelper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/ToucanOffsetter.sol:ToucanOffsetter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/ToucanOffsetter.sol:ToucanOffsetter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}