{
  "address": "0xd4C90eD0954a85629Bf272616fA55c0Af7B5D55C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wethGateway",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "aWETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolDeployed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aavePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "beneficiaryPools",
      "outputs": [
        {
          "internalType": "contract BeneficiaryPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "staked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "supporter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "supporterStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethgw",
      "outputs": [
        {
          "internalType": "contract IWETHGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9f382cee33947526a774651a6be15d28159e3468533b6a593221466cb3af9e7",
  "receipt": {
    "to": null,
    "from": "0x692E08475F5363eBF842b66e70a82a758A68E980",
    "contractAddress": "0xd4C90eD0954a85629Bf272616fA55c0Af7B5D55C",
    "transactionIndex": 37,
    "gasUsed": "2338820",
    "logsBloom": "0x
    "blockHash": "0x40b3307f00e5b5eac61bff1cc14d73d280bd6dbd6036702ff49bcd99769dd511",
    "transactionHash": "0xb9f382cee33947526a774651a6be15d28159e3468533b6a593221466cb3af9e7",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 29418624,
        "transactionHash": "0xb9f382cee33947526a774651a6be15d28159e3468533b6a593221466cb3af9e7",
        "address": "0x8c7D583439055328AA1c061c64a4a60448eF71e6",
        "topics": [
          "0x9c92c5fd8f46c80999fdfc6ba5e98e7aa75229504a0426b93b309c6c5377ef0f",
          "0x000000000000000000000000692e08475f5363ebf842b66e70a82a758a68e980"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 138,
        "blockHash": "0x40b3307f00e5b5eac61bff1cc14d73d280bd6dbd6036702ff49bcd99769dd511"
      },
      {
        "transactionIndex": 37,
        "blockNumber": 29418624,
        "transactionHash": "0xb9f382cee33947526a774651a6be15d28159e3468533b6a593221466cb3af9e7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000692e08475f5363ebf842b66e70a82a758a68e980",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000c76b17a3af0a8000000000000000000000000000000000000000000000000280ae02a9de6eece0000000000000000000000000000000000000000000017f1b45696ad74683f6a00000000000000000000000000000000000000000000000027fe697923abfe260000000000000000000000000000000000000000000017f1b4630d5eeea33012",
        "logIndex": 139,
        "blockHash": "0x40b3307f00e5b5eac61bff1cc14d73d280bd6dbd6036702ff49bcd99769dd511"
      }
    ],
    "blockNumber": 29418624,
    "cumulativeGasUsed": "9883284",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6C9fB0D5bD9429eb9Cd96B85B81d872281771E6B",
    "0x2a58E9bbb5434FdA7FF78051a4B82cb0EF669C17",
    "0x89a6AE840b3F8f489418933A220315eeA36d11fF"
  ],
  "numDeployments": 3,
  "solcInputHash": "13dd26f8daf12d363c04a6203e43909d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethGateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aWETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aavePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaryPools\",\"outputs\":[{\"internalType\":\"contract BeneficiaryPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"supporterStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethgw\",\"outputs\":[{\"internalType\":\"contract IWETHGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YieldGate.sol\":\"YieldGate\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xae614c6b103b743c62e9544632f7ef4fc8950de4e9c783d2e765a3b86701dda3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/YieldGate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IWETHGateway} from \\\"./deps/Aave.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\ncontract YieldGate {\\n    event PoolDeployed(address indexed beneficiary, address indexed deployer, address pool);\\n\\n    address private immutable beneficiaryPoolLib;\\n    address public immutable aavePool;\\n    IWETHGateway public immutable wethgw;\\n    IERC20 public immutable token;\\n\\n    // beneficiary => BeneficiaryPool\\n    mapping(address => BeneficiaryPool) public beneficiaryPools;\\n\\n    constructor(\\n        address _pool,\\n        address wethGateway,\\n        address aWETH\\n    ) {\\n        aavePool = _pool;\\n        wethgw = IWETHGateway(wethGateway);\\n        token = IERC20(aWETH);\\n\\n        BeneficiaryPool bp = new BeneficiaryPool();\\n        // init it so no one else can (RIP Parity Multisig)\\n        bp.init(address(this), msg.sender);\\n        beneficiaryPoolLib = address(bp);\\n    }\\n\\n    function deployPool(address beneficiary) external returns (address) {\\n        BeneficiaryPool bpool = BeneficiaryPool(Clones.clone(beneficiaryPoolLib));\\n        bpool.init(address(this), beneficiary);\\n        beneficiaryPools[beneficiary] = bpool;\\n\\n        emit PoolDeployed(beneficiary, msg.sender, address(bpool));\\n        return address(bpool);\\n    }\\n\\n    // claimable returns the total earned ether by the provided beneficiary.\\n    // It is the accrued interest on all staked ether.\\n    // It can be withdrawn by the beneficiary with claim.\\n    function claimable(address beneficiary) public view returns (uint256) {\\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\\n        if (address(bpool) == address(0)) {\\n            return 0;\\n        }\\n        return bpool.claimable();\\n    }\\n\\n    // staked returns the total staked ether on behalf of the beneficiary.\\n    function staked(address beneficiary) public view returns (uint256) {\\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\\n        if (address(bpool) == address(0)) {\\n            return 0;\\n        }\\n        return bpool.staked();\\n    }\\n\\n    // returns the total staked ether by the supporter and the timeout until\\n    // which the stake is locked.\\n    function supporterStaked(address supporter, address beneficiary)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\\n        if (address(bpool) == address(0)) {\\n            return (0, 0);\\n        }\\n        return (bpool.stakes(supporter), bpool.lockTimeout(supporter));\\n    }\\n}\\n\\ncontract BeneficiaryPool {\\n    event Staked(\\n        address indexed beneficiary,\\n        address indexed supporter,\\n        uint256 amount,\\n        uint256 lockTimeout\\n    );\\n    event Unstaked(address indexed beneficiary, address indexed supporter, uint256 amount);\\n    event Claimed(address indexed beneficiary, uint256 amount);\\n    event ParametersChanged(address indexed beneficiary, uint256 minAmount, uint256 minDuration);\\n\\n    YieldGate public gate;\\n    address public beneficiary;\\n\\n    // Minimum required amount to stake.\\n    uint256 public minAmount;\\n    // Minimum required staking duration (in seconds).\\n    uint256 public minDuration;\\n    // Records when a supporter is allowed to unstake again. This has the added\\n    // benefit that future changes to the duration do not affect current stakes.\\n    mapping(address => uint256) internal lockTimeouts;\\n\\n    // supporter => amount\\n    mapping(address => uint256) public stakes;\\n    // total staked amount\\n    uint256 internal totalStake;\\n\\n    modifier onlyBeneficiary() {\\n        require(msg.sender == beneficiary, \\\"only beneficiary\\\");\\n        _;\\n    }\\n\\n    // Initializes this contract's parameters after deployment. This is called\\n    // by the pool factory, i.e. the Yieldgate main contract, right after\\n    // deployment. Can only be called once.\\n    function init(address _gate, address _beneficiary) public {\\n        require(address(gate) == address(0), \\\"already initialized\\\");\\n\\n        gate = YieldGate(_gate);\\n        beneficiary = _beneficiary;\\n\\n        emitParametersChanged(0, 0);\\n    }\\n\\n    // To save gas, add individual parameter setters.\\n\\n    function setMinAmount(uint256 _minAmount) external onlyBeneficiary {\\n        minAmount = _minAmount;\\n        emitParametersChanged(_minAmount, minDuration);\\n    }\\n\\n    function setMinDuration(uint256 _minDuration) external onlyBeneficiary {\\n        minDuration = _minDuration;\\n        emitParametersChanged(minAmount, _minDuration);\\n    }\\n\\n    function setParameters(uint256 _minAmount, uint256 _minDuration) external onlyBeneficiary {\\n        minAmount = _minAmount;\\n        minDuration = _minDuration;\\n        emitParametersChanged(_minAmount, _minDuration);\\n    }\\n\\n    function emitParametersChanged(uint256 _minAmount, uint256 _minDuration) internal {\\n        emit ParametersChanged(beneficiary, _minAmount, _minDuration);\\n    }\\n\\n    // Stakes the sent ether on behalf of the provided supporter. The supporter\\n    // is usually msg.sender if staking on the transaction sender's behalf.\\n    // The staking timeout is reset on each call, so prior stake is re-locked.\\n    function stake(address supporter) public payable {\\n        uint256 amount = msg.value;\\n        require(amount > 0 && stakes[supporter] + amount >= minAmount, \\\"amount too low\\\");\\n\\n        stakes[supporter] += amount;\\n        totalStake += amount;\\n        uint256 timeout = 0;\\n        if (minDuration > 0) {\\n            timeout = block.timestamp + minDuration;\\n        }\\n        lockTimeouts[supporter] = timeout;\\n\\n        gate.wethgw().depositETH{value: amount}(gate.aavePool(), address(this), 0);\\n        emit Staked(beneficiary, supporter, amount, timeout);\\n    }\\n\\n    // Unstakes all previously staked ether by the calling supporter.\\n    // The beneficiary keeps all generated yield.\\n    // If a minimum staking duration was set by the beneficiary at the time of\\n    // staking, it is checked that the timeout has elapsed.\\n    function unstake() public returns (uint256) {\\n        address supporter = msg.sender;\\n        require(block.timestamp >= lockTimeout(supporter), \\\"stake still locked\\\");\\n\\n        uint256 amount = stakes[supporter];\\n        require(amount > 0, \\\"no supporter\\\");\\n\\n        stakes[supporter] = 0;\\n        totalStake -= amount;\\n\\n        withdraw(amount, supporter);\\n        emit Unstaked(beneficiary, supporter, amount);\\n        return amount;\\n    }\\n\\n    // claim sends the accrued interest to the beneficiary of this pool. Staked\\n    // ether remains at the yield pool and continues generating yield.\\n    function claim() public onlyBeneficiary returns (uint256) {\\n        uint256 amount = claimable();\\n        withdraw(amount, beneficiary);\\n        emit Claimed(beneficiary, amount);\\n        return amount;\\n    }\\n\\n    function withdraw(uint256 amount, address receiver) internal {\\n        require(gate.token().approve(address(gate.wethgw()), amount), \\\"ethgw approval failed\\\");\\n        gate.wethgw().withdrawETH(gate.aavePool(), amount, receiver);\\n    }\\n\\n    // claimable returns the total earned ether by the provided beneficiary.\\n    // It is the accrued interest on all staked ether.\\n    // It can be withdrawn by the beneficiary with claim.\\n    function claimable() public view returns (uint256) {\\n        return gate.token().balanceOf(address(this)) - staked();\\n    }\\n\\n    // staked returns the total staked ether by this beneficiary pool.\\n    function staked() public view returns (uint256) {\\n        return totalStake;\\n    }\\n\\n    // lockTimeout returns the effective timeout until when a supporter's stake\\n    // is locked. If the minDuration is 0 it is always 0, possibly disregarding\\n    // an old lock from prior staking when minDuration was > 0.\\n    function lockTimeout(address supporter) public view returns (uint256) {\\n        // Set timeout to 0 if minDuration == 0 because a supporter could then\\n        // trivially reset their lock timeout by staking and then immediately\\n        // unstaking anyways.\\n        if (minDuration == 0) {\\n            return 0;\\n        }\\n        return lockTimeouts[supporter];\\n    }\\n}\\n\",\"keccak256\":\"0x8285afc08ee61e469aad63be65a6afd921af130a7f43b3f001938250483b7218\",\"license\":\"MIT\"},\"contracts/deps/Aave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IWETHGateway {\\n    function depositETH(\\n        address pool,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external payable;\\n\\n    function withdrawETH(\\n        address pool,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) external;\\n}\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n * https://github.com/aave/aave-v3-core/blob/master/contracts/interfaces/IPoolAddressesProvider.sol\\n **/\\ninterface IAavePoolAddressesProvider {\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n     * @return The Pool proxy address\\n     **/\\n    function getPool() external view returns (address);\\n}\\n\\n// https://github.com/aave/aave-v3-core/blob/master/contracts/interfaces/IPool.sol\\ninterface IAavePool {\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state and configuration data of the reserve\\n     **/\\n    function getReserveData(address asset) external view returns (AaveDataTypes.ReserveData memory);\\n}\\n\\n// https://github.com/aave/aave-v3-core/blob/master/contracts/protocol/libraries/types/DataTypes.sol\\nlibrary AaveDataTypes {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        //timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint16 id;\\n        //aToken address\\n        address aTokenAddress;\\n        //stableDebtToken address\\n        address stableDebtTokenAddress;\\n        //variableDebtToken address\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n        //the outstanding unbacked aTokens minted through the bridging feature\\n        uint128 unbacked;\\n        //the outstanding debt borrowed against this asset in isolation mode\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62-63: reserved\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n\\n        uint256 data;\\n    }\\n}\\n\",\"keccak256\":\"0x80461eb1d77b7671c5523ee799b7e39757033be922e76fb78ba814968a8f83d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162002ae438038062002ae483398181016040528101906200003891906200022b565b8273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250506000604051620000e490620001b3565b604051809103906000f08015801562000101573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663f09a401630336040518363ffffffff1660e01b81526004016200014192919062000298565b600060405180830381600087803b1580156200015c57600080fd5b505af115801562000171573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050505050620002c5565b611bb68062000f2e83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001f382620001c6565b9050919050565b6200020581620001e6565b81146200021157600080fd5b50565b6000815190506200022581620001fa565b92915050565b600080600060608486031215620002475762000246620001c1565b5b6000620002578682870162000214565b93505060206200026a8682870162000214565b92505060406200027d8682870162000214565b9150509250925092565b6200029281620001e6565b82525050565b6000604082019050620002af600083018562000287565b620002be602083018462000287565b9392505050565b60805160a05160c05160e051610c2f620002ff60003960006107ba01526000610796015260006105c9015260006101e00152610c2f6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a03e4bc31161005b578063a03e4bc31461014d578063bfb689c31461016b578063f29046111461019c578063fc0c546a146101ba57610088565b806329a134941461008d578063402914f5146100bd578063956d67c6146100ed57806398807d841461011d575b600080fd5b6100a760048036038101906100a29190610914565b6101d8565b6040516100b49190610950565b60405180910390f35b6100d760048036038101906100d29190610914565b61035e565b6040516100e49190610984565b60405180910390f35b61010760048036038101906101029190610914565b610479565b60405161011491906109fe565b60405180910390f35b61013760048036038101906101329190610914565b6104ac565b6040516101449190610984565b60405180910390f35b6101556105c7565b6040516101629190610950565b60405180910390f35b61018560048036038101906101809190610a19565b6105eb565b604051610193929190610a59565b60405180910390f35b6101a4610794565b6040516101b19190610aa3565b60405180910390f35b6101c26107b8565b6040516101cf9190610adf565b60405180910390f35b6000806102047f00000000000000000000000000000000000000000000000000000000000000006107dc565b90508073ffffffffffffffffffffffffffffffffffffffff1663f09a401630856040518363ffffffff1660e01b8152600401610241929190610afa565b600060405180830381600087803b15801561025b57600080fd5b505af115801561026f573d6000803e3d6000fd5b50505050806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f04c12766244f2559dd215eecd69f70fdfce0e2c2260b5d52cb8b63738622eaa48360405161034d9190610950565b60405180910390a380915050919050565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610401576000915050610474565b8073ffffffffffffffffffffffffffffffffffffffff1663af38d7576040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104709190610b4f565b9150505b919050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561054f5760009150506105c2565b8073ffffffffffffffffffffffffffffffffffffffff16630b76619b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561059a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105be9190610b4f565b9150505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561069357600080925092505061078d565b8073ffffffffffffffffffffffffffffffffffffffff166316934fc4866040518263ffffffff1660e01b81526004016106cc9190610950565b602060405180830381865afa1580156106e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070d9190610b4f565b8173ffffffffffffffffffffffffffffffffffffffff166359b92514876040518263ffffffff1660e01b81526004016107469190610950565b602060405180830381865afa158015610763573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107879190610b4f565b92509250505b9250929050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a390610bd9565b60405180910390fd5b919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108e1826108b6565b9050919050565b6108f1816108d6565b81146108fc57600080fd5b50565b60008135905061090e816108e8565b92915050565b60006020828403121561092a576109296108b1565b5b6000610938848285016108ff565b91505092915050565b61094a816108d6565b82525050565b60006020820190506109656000830184610941565b92915050565b6000819050919050565b61097e8161096b565b82525050565b60006020820190506109996000830184610975565b92915050565b6000819050919050565b60006109c46109bf6109ba846108b6565b61099f565b6108b6565b9050919050565b60006109d6826109a9565b9050919050565b60006109e8826109cb565b9050919050565b6109f8816109dd565b82525050565b6000602082019050610a1360008301846109ef565b92915050565b60008060408385031215610a3057610a2f6108b1565b5b6000610a3e858286016108ff565b9250506020610a4f858286016108ff565b9150509250929050565b6000604082019050610a6e6000830185610975565b610a7b6020830184610975565b9392505050565b6000610a8d826109cb565b9050919050565b610a9d81610a82565b82525050565b6000602082019050610ab86000830184610a94565b92915050565b6000610ac9826109cb565b9050919050565b610ad981610abe565b82525050565b6000602082019050610af46000830184610ad0565b92915050565b6000604082019050610b0f6000830185610941565b610b1c6020830184610941565b9392505050565b610b2c8161096b565b8114610b3757600080fd5b50565b600081519050610b4981610b23565b92915050565b600060208284031215610b6557610b646108b1565b5b6000610b7384828501610b3a565b91505092915050565b600082825260208201905092915050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b6000610bc3601683610b7c565b9150610bce82610b8d565b602082019050919050565b60006020820190508181036000830152610bf281610bb6565b905091905056fea26469706673582212207a7bc92c2a7d3f68d6cce32fda27d060a42bd23db6109c57f658ca8b0ea17c8364736f6c634300080a0033608060405234801561001057600080fd5b50611b96806100206000396000f3fe6080604052600436106100e85760003560e01c8063567157611161008a578063897b063711610059578063897b0637146102d75780639b2cb5d814610300578063af38d7571461032b578063f09a401614610356576100e8565b8063567157611461021b57806359b92514146102465780637a0ebc8814610283578063884870c7146102ae576100e8565b806326476204116100c6578063264762041461017e5780632def66201461019a57806338af3eed146101c55780634e71d92d146101f0576100e8565b80630b76619b146100ed5780631674bade1461011857806316934fc414610141575b600080fd5b3480156100f957600080fd5b5061010261037f565b60405161010f919061131e565b60405180910390f35b34801561012457600080fd5b5061013f600480360381019061013a919061136a565b610389565b005b34801561014d57600080fd5b50610168600480360381019061016391906113f5565b61042f565b604051610175919061131e565b60405180910390f35b610198600480360381019061019391906113f5565b610447565b005b3480156101a657600080fd5b506101af6107d2565b6040516101bc919061131e565b60405180910390f35b3480156101d157600080fd5b506101da6109a1565b6040516101e79190611431565b60405180910390f35b3480156101fc57600080fd5b506102056109c7565b604051610212919061131e565b60405180910390f35b34801561022757600080fd5b50610230610b08565b60405161023d919061131e565b60405180910390f35b34801561025257600080fd5b5061026d600480360381019061026891906113f5565b610b0e565b60405161027a919061131e565b60405180910390f35b34801561028f57600080fd5b50610298610b6b565b6040516102a591906114ab565b60405180910390f35b3480156102ba57600080fd5b506102d560048036038101906102d091906114c6565b610b8f565b005b3480156102e357600080fd5b506102fe60048036038101906102f9919061136a565b610c3b565b005b34801561030c57600080fd5b50610315610ce1565b604051610322919061131e565b60405180910390f35b34801561033757600080fd5b50610340610ce7565b60405161034d919061131e565b60405180910390f35b34801561036257600080fd5b5061037d60048036038101906103789190611506565b610e08565b005b6000600654905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610419576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610410906115a3565b60405180910390fd5b8060038190555061042c60025482610f27565b50565b60056020528060005260406000206000915090505481565b60003490506000811180156104a8575060025481600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104a591906115f2565b10155b6104e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104de90611694565b60405180910390fd5b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461053691906115f2565b92505081905550806006600082825461054f91906115f2565b925050819055506000806003541115610573576003544261057091906115f2565b90505b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f29046116040518163ffffffff1660e01b8152600401602060405180830381865afa158015610622573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064691906116f2565b73ffffffffffffffffffffffffffffffffffffffff1663474cf53d8360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a03e4bc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f19190611734565b3060006040518563ffffffff1660e01b8152600401610712939291906117aa565b6000604051808303818588803b15801561072b57600080fd5b505af115801561073f573d6000803e3d6000fd5b50505050508273ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f6c86f3fd5118b3aa8bb4f389a617046de0a3d3d477de1a1673d227f802f616dc84846040516107c59291906117e1565b60405180910390a3505050565b6000803390506107e181610b0e565b421015610823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081a90611856565b60405180910390fd5b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116108aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a1906118c2565b60405180910390fd5b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806006600082825461090191906118e2565b925050819055506109128183610f9d565b8173ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fd8654fcc8cf5b36d30b3f5e4688fc78118e6d68de60b9994e09902268b57c3e383604051610991919061131e565b60405180910390a3809250505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a50906115a3565b60405180910390fd5b6000610a63610ce7565b9050610a9181600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610f9d565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a82604051610af9919061131e565b60405180910390a28091505090565b60035481565b6000806003541415610b235760009050610b66565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c16906115a3565b60405180910390fd5b8160028190555080600381905550610c378282610f27565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc2906115a3565b60405180910390fd5b80600281905550610cde81600354610f27565b50565b60025481565b6000610cf161037f565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d809190611954565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610db89190611431565b602060405180830381865afa158015610dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df99190611996565b610e0391906118e2565b905090565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8e90611a0f565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f23600080610f27565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f9c92c5fd8f46c80999fdfc6ba5e98e7aa75229504a0426b93b309c6c5377ef0f8383604051610f919291906117e1565b60405180910390a25050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102c9190611954565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f29046116040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d691906116f2565b846040518363ffffffff1660e01b81526004016110f4929190611a2f565b6020604051808303816000875af1158015611113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111379190611a90565b611176576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116d90611b09565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f29046116040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120591906116f2565b73ffffffffffffffffffffffffffffffffffffffff166380500d2060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a03e4bc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561128b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112af9190611734565b84846040518463ffffffff1660e01b81526004016112cf93929190611b29565b600060405180830381600087803b1580156112e957600080fd5b505af11580156112fd573d6000803e3d6000fd5b505050505050565b6000819050919050565b61131881611305565b82525050565b6000602082019050611333600083018461130f565b92915050565b600080fd5b61134781611305565b811461135257600080fd5b50565b6000813590506113648161133e565b92915050565b6000602082840312156113805761137f611339565b5b600061138e84828501611355565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113c282611397565b9050919050565b6113d2816113b7565b81146113dd57600080fd5b50565b6000813590506113ef816113c9565b92915050565b60006020828403121561140b5761140a611339565b5b6000611419848285016113e0565b91505092915050565b61142b816113b7565b82525050565b60006020820190506114466000830184611422565b92915050565b6000819050919050565b600061147161146c61146784611397565b61144c565b611397565b9050919050565b600061148382611456565b9050919050565b600061149582611478565b9050919050565b6114a58161148a565b82525050565b60006020820190506114c0600083018461149c565b92915050565b600080604083850312156114dd576114dc611339565b5b60006114eb85828601611355565b92505060206114fc85828601611355565b9150509250929050565b6000806040838503121561151d5761151c611339565b5b600061152b858286016113e0565b925050602061153c858286016113e0565b9150509250929050565b600082825260208201905092915050565b7f6f6e6c792062656e656669636961727900000000000000000000000000000000600082015250565b600061158d601083611546565b915061159882611557565b602082019050919050565b600060208201905081810360008301526115bc81611580565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115fd82611305565b915061160883611305565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561163d5761163c6115c3565b5b828201905092915050565b7f616d6f756e7420746f6f206c6f77000000000000000000000000000000000000600082015250565b600061167e600e83611546565b915061168982611648565b602082019050919050565b600060208201905081810360008301526116ad81611671565b9050919050565b60006116bf826113b7565b9050919050565b6116cf816116b4565b81146116da57600080fd5b50565b6000815190506116ec816116c6565b92915050565b60006020828403121561170857611707611339565b5b6000611716848285016116dd565b91505092915050565b60008151905061172e816113c9565b92915050565b60006020828403121561174a57611749611339565b5b60006117588482850161171f565b91505092915050565b6000819050919050565b600061ffff82169050919050565b600061179461178f61178a84611761565b61144c565b61176b565b9050919050565b6117a481611779565b82525050565b60006060820190506117bf6000830186611422565b6117cc6020830185611422565b6117d9604083018461179b565b949350505050565b60006040820190506117f6600083018561130f565b611803602083018461130f565b9392505050565b7f7374616b65207374696c6c206c6f636b65640000000000000000000000000000600082015250565b6000611840601283611546565b915061184b8261180a565b602082019050919050565b6000602082019050818103600083015261186f81611833565b9050919050565b7f6e6f20737570706f727465720000000000000000000000000000000000000000600082015250565b60006118ac600c83611546565b91506118b782611876565b602082019050919050565b600060208201905081810360008301526118db8161189f565b9050919050565b60006118ed82611305565b91506118f883611305565b92508282101561190b5761190a6115c3565b5b828203905092915050565b6000611921826113b7565b9050919050565b61193181611916565b811461193c57600080fd5b50565b60008151905061194e81611928565b92915050565b60006020828403121561196a57611969611339565b5b60006119788482850161193f565b91505092915050565b6000815190506119908161133e565b92915050565b6000602082840312156119ac576119ab611339565b5b60006119ba84828501611981565b91505092915050565b7f616c726561647920696e697469616c697a656400000000000000000000000000600082015250565b60006119f9601383611546565b9150611a04826119c3565b602082019050919050565b60006020820190508181036000830152611a28816119ec565b9050919050565b6000604082019050611a446000830185611422565b611a51602083018461130f565b9392505050565b60008115159050919050565b611a6d81611a58565b8114611a7857600080fd5b50565b600081519050611a8a81611a64565b92915050565b600060208284031215611aa657611aa5611339565b5b6000611ab484828501611a7b565b91505092915050565b7f657468677720617070726f76616c206661696c65640000000000000000000000600082015250565b6000611af3601583611546565b9150611afe82611abd565b602082019050919050565b60006020820190508181036000830152611b2281611ae6565b9050919050565b6000606082019050611b3e6000830186611422565b611b4b602083018561130f565b611b586040830184611422565b94935050505056fea26469706673582212201eb8b69f06bbc780afffcdeed8fdb186e538759123012bab0fed7ac89ab8605964736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a03e4bc31161005b578063a03e4bc31461014d578063bfb689c31461016b578063f29046111461019c578063fc0c546a146101ba57610088565b806329a134941461008d578063402914f5146100bd578063956d67c6146100ed57806398807d841461011d575b600080fd5b6100a760048036038101906100a29190610914565b6101d8565b6040516100b49190610950565b60405180910390f35b6100d760048036038101906100d29190610914565b61035e565b6040516100e49190610984565b60405180910390f35b61010760048036038101906101029190610914565b610479565b60405161011491906109fe565b60405180910390f35b61013760048036038101906101329190610914565b6104ac565b6040516101449190610984565b60405180910390f35b6101556105c7565b6040516101629190610950565b60405180910390f35b61018560048036038101906101809190610a19565b6105eb565b604051610193929190610a59565b60405180910390f35b6101a4610794565b6040516101b19190610aa3565b60405180910390f35b6101c26107b8565b6040516101cf9190610adf565b60405180910390f35b6000806102047f00000000000000000000000000000000000000000000000000000000000000006107dc565b90508073ffffffffffffffffffffffffffffffffffffffff1663f09a401630856040518363ffffffff1660e01b8152600401610241929190610afa565b600060405180830381600087803b15801561025b57600080fd5b505af115801561026f573d6000803e3d6000fd5b50505050806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f04c12766244f2559dd215eecd69f70fdfce0e2c2260b5d52cb8b63738622eaa48360405161034d9190610950565b60405180910390a380915050919050565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610401576000915050610474565b8073ffffffffffffffffffffffffffffffffffffffff1663af38d7576040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104709190610b4f565b9150505b919050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561054f5760009150506105c2565b8073ffffffffffffffffffffffffffffffffffffffff16630b76619b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561059a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105be9190610b4f565b9150505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561069357600080925092505061078d565b8073ffffffffffffffffffffffffffffffffffffffff166316934fc4866040518263ffffffff1660e01b81526004016106cc9190610950565b602060405180830381865afa1580156106e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070d9190610b4f565b8173ffffffffffffffffffffffffffffffffffffffff166359b92514876040518263ffffffff1660e01b81526004016107469190610950565b602060405180830381865afa158015610763573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107879190610b4f565b92509250505b9250929050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a390610bd9565b60405180910390fd5b919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108e1826108b6565b9050919050565b6108f1816108d6565b81146108fc57600080fd5b50565b60008135905061090e816108e8565b92915050565b60006020828403121561092a576109296108b1565b5b6000610938848285016108ff565b91505092915050565b61094a816108d6565b82525050565b60006020820190506109656000830184610941565b92915050565b6000819050919050565b61097e8161096b565b82525050565b60006020820190506109996000830184610975565b92915050565b6000819050919050565b60006109c46109bf6109ba846108b6565b61099f565b6108b6565b9050919050565b60006109d6826109a9565b9050919050565b60006109e8826109cb565b9050919050565b6109f8816109dd565b82525050565b6000602082019050610a1360008301846109ef565b92915050565b60008060408385031215610a3057610a2f6108b1565b5b6000610a3e858286016108ff565b9250506020610a4f858286016108ff565b9150509250929050565b6000604082019050610a6e6000830185610975565b610a7b6020830184610975565b9392505050565b6000610a8d826109cb565b9050919050565b610a9d81610a82565b82525050565b6000602082019050610ab86000830184610a94565b92915050565b6000610ac9826109cb565b9050919050565b610ad981610abe565b82525050565b6000602082019050610af46000830184610ad0565b92915050565b6000604082019050610b0f6000830185610941565b610b1c6020830184610941565b9392505050565b610b2c8161096b565b8114610b3757600080fd5b50565b600081519050610b4981610b23565b92915050565b600060208284031215610b6557610b646108b1565b5b6000610b7384828501610b3a565b91505092915050565b600082825260208201905092915050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b6000610bc3601683610b7c565b9150610bce82610b8d565b602082019050919050565b60006020820190508181036000830152610bf281610bb6565b905091905056fea26469706673582212207a7bc92c2a7d3f68d6cce32fda27d060a42bd23db6109c57f658ca8b0ea17c8364736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2798,
        "contract": "contracts/YieldGate.sol:YieldGate",
        "label": "beneficiaryPools",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_contract(BeneficiaryPool)3425)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(BeneficiaryPool)3425": {
        "encoding": "inplace",
        "label": "contract BeneficiaryPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(BeneficiaryPool)3425)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract BeneficiaryPool)",
        "numberOfBytes": "32",
        "value": "t_contract(BeneficiaryPool)3425"
      }
    }
  }
}